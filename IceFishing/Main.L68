00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/24/2025 9:27:41 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main
00000000                             3  * Written by : Carter Buell
00000000                             4  * Date       : 5/29/2025
00000000                             5  * Description:
00000000                             6  *
00000000                             7  * Main file for the Ice Fishing game. 
00000000                             8  * Includes commonly used equates, global variables, 
00000000                             9  * and game loops.
00000000                            10  *-----------------------------------------------------------
00000000                            11  
00000000                            12  *--------------------TRAP CODES--------------------*
00000000  =00000005                 13  GET_SINGLE_CHAR_TRAP_CODE       EQU 5
00000000  =00000008                 14  GET_TIME_TRAP_CODE              EQU 8
00000000  =0000000B                 15  CLEAR_SCREEN_TRAP_CODE          EQU 11
00000000  =0000000B                 16  SET_CURSOR_POSITION_TRAP_CODE   EQU 11
00000000  =0000FF00                 17  CLEAR_SCREEN_MODE               EQU $FF00
00000000  =00000010                 18  NO_BUFFERING_MODE_NUMBER        EQU 16
00000000  =00000011                 19  DOUBLE_BUFFERING_MODE_NUMBER    EQU 17
00000000  =00000013                 20  GET_KEY_STATE_TRAP_CODE         EQU 19
00000000  =00000015                 21  SET_FONT_TRAP_CODE              EQU 21
00000000  =00000021                 22  SET_OUTPUT_RESOLUTION_TRAP_CODE EQU 33
00000000  =0000003D                 23  MOUSE_INPUT_TRAP_CODE           EQU 61
00000000  =00000049                 24  PLAY_SOUND_TRAP_CODE            EQU 73
00000000  =0000004A                 25  LOAD_SOUND_TRAP_CODE            EQU 74
00000000  =0000004D                 26  LOOP_SOUND_TRAP_CODE            EQU 77
00000000  =00000050                 27  PEN_COLOR_TRAP_CODE             EQU 80
00000000  =00000051                 28  SET_FILL_COLOR_TRAP_CODE        EQU 81
00000000  =00000052                 29  DRAW_PIXEL_TRAP_CODE            EQU 82
00000000  =00000054                 30  DRAW_LINE_TRAP_CODE             EQU 84
00000000  =00000057                 31  DRAW_RECT_TRAP_CODE             EQU 87
00000000  =0000005C                 32  DRAW_MODE_TRAP_CODE             EQU 92
00000000  =0000005D                 33  PEN_WIDTH_TRAP_CODE             EQU 93
00000000  =0000005E                 34  REPAINT_SCREEN_TRAP_CODE        EQU 94
00000000  =0000005F                 35  TEXT_TO_SCREEN_TRAP_CODE        EQU 95
00000000                            36  
00000000                            37  *----------------WINDOW DIMENSIONS-----------------*
00000000  =000002F8                 38  OUTPUT_WINDOW_WIDTH             EQU 760
00000000  =00000258                 39  OUTPUT_WINDOW_HEIGHT            EQU 600
00000000                            40  
00000000                            41  *---------------------COLORS-----------------------*
00000000  =00FFFFFF                 42  WHITE                           EQU $FFFFFF
00000000  =00000000                 43  BLACK                           EQU $000000
00000000  =000000FF                 44  RED                             EQU $0000FF
00000000  =00D28049                 45  WATER_COLOR                     EQU $D28049
00000000  =008888FF                 46  WORM_FILL_COLOR                 EQU $8888FF
00000000  =004117A4                 47  WORM_PEN_COLOR                  EQU $4117A4
00000000  =0098E5FE                 48  COOLER_COLOR                    EQU $98E5FE
00000000  =00405D67                 49  COOLER_TEXT_COLOR               EQU $405D67
00000000  =007E5958                 50  LOADING_PURPLE_COLOR            EQU $7E5958
00000000                            51  
00000000                            52  *----------------GAME OBJECT SIZES-----------------*
00000000  =00000048                 53  FISH_WIDTH                      EQU 72
00000000  =00000024                 54  FISH_HEIGHT                     EQU 36
00000000                            55  
00000000  =00000012                 56  CAUGHT_FISH_WIDTH               EQU 18
00000000  =00000024                 57  CAUGHT_FISH_HEIGHT              EQU 36
00000000                            58  
00000000  =00000030                 59  BOOT_WIDTH                      EQU 48
00000000  =00000030                 60  BOOT_HEIGHT                     EQU 48
00000000                            61  
00000000  =00000030                 62  JELLY_WIDTH                     EQU 48
00000000  =00000030                 63  JELLY_HEIGHT                    EQU 48
00000000                            64  
00000000  =00000078                 65  MULLET_WIDTH                    EQU 120
00000000  =00000030                 66  MULLET_HEIGHT                   EQU 48
00000000                            67  
00000000                            68  *----------------SCREEN POSITIONS------------------*
00000000  =000000E2                 69  LANE_0_LOCATION                 EQU 226
00000000  =0000012A                 70  LANE_1_LOCATION                 EQU 298
00000000  =00000172                 71  LANE_2_LOCATION                 EQU 370
00000000  =000001BA                 72  LANE_3_LOCATION                 EQU 442
00000000                            73  
00000000  =000000BE                 74  TOP_OF_WATER                    EQU 190
00000000  =000001DE                 75  BOTTOM_OF_WATER                 EQU 478
00000000                            76  
00000000  =0000009F                 77  ICE_SEGMENT_TOP                 EQU 159
00000000  =000000B3                 78  ICE_SEGMENT_BOTTOM              EQU 179
00000000  =00000014                 79  ICE_SEGMENT_HEIGHT              EQU (ICE_SEGMENT_BOTTOM-ICE_SEGMENT_TOP)
00000000                            80  
00000000  =0000008F                 81  ABOVE_WATER                     EQU (ICE_SEGMENT_BOTTOM-CAUGHT_FISH_HEIGHT)
00000000  =0000002A                 82  TOP_OF_POLE                     EQU 42
00000000  =0000016F                 83  POLE_X                          EQU 367
00000000                            84  
00000000                            85  *----------------------FONTS-----------------------*
00000000  =020A0001                 86  LOADING_SMALL_FONT              EQU $020A0001
00000000  =06100000                 87  END_BANNER_FONT                 EQU $06100000
00000000  =06100001                 88  END_BANNER_FONT_BOLD            EQU $06100001
00000000  =06360001                 89  NAME_PROMPT_FONT                EQU $06360001
00000000                            90  
00000000                            91  *-----------------------ASCII----------------------*
00000000  =0000001B                 92  EscapeASCIIValue                EQU $1B
00000000  =00000030                 93  DEC_TO_ASCII                    EQU 48
00000000  =00000020                 94  SPACE_ASCII_CHAR                EQU 32
00000000                            95  
00000000                            96  *-----------------GAME OBJECT TYPES----------------*
00000000  =00000000                 97  FISH_TYPE                       EQU 0
00000000  =00000001                 98  BOOT_TYPE                       EQU 1
00000000  =00000002                 99  JELLY_TYPE                      EQU 2
00000000  =00000003                100  INVISIBLE_TYPE                  EQU 3
00000000  =00000004                101  MULLET_TYPE                     EQU 4
00000000                           102  
00000000  =00000000                103  FRAME_0                         EQU 0
00000000  =00000001                104  FRAME_1                         EQU 1
00000000  =00000002                105  FRAME_2                         EQU 2
00000000  =00000003                106  FRAME_3                         EQU 3
00000000  =00000004                107  FRAME_RESET                     EQU 4
00000000                           108  
00000000  =00000000                109  LANE_0                          EQU 0
00000000  =00000001                110  LANE_1                          EQU 1
00000000  =00000002                111  LANE_2                          EQU 2
00000000  =00000003                112  LANE_3                          EQU 3
00000000                           113  
00000000  =00000005                114  SLOW_RIGHT                      EQU 5
00000000  =FFFFFFFB                115  SLOW_LEFT                       EQU -5
00000000  =00000007                116  FAST_RIGHT                      EQU 7
00000000  =FFFFFFF9                117  FAST_LEFT                       EQU -7
00000000                           118  
00000000                           119  *---------------TABLE ACCESS OFFSETS---------------*
00000000  =00000006                120  GAME_OBJECT_TABLE_ENTRY_SIZE    EQU 6
00000000                           121  
00000000  =00000000                122  GET_X_POS                       EQU 0
00000000  =00000002                123  GET_SPEED                       EQU 2
00000000  =00000003                124  GET_LANE                        EQU 3
00000000  =00000004                125  GET_TYPE                        EQU 4
00000000  =00000005                126  GET_FRAME                       EQU 5
00000000                           127  
00000000  =00000000                128  GET_NUM_FISH_CAUGHT             EQU 0
00000000  =00000001                129  GET_IS_FISH_ON_HOOK             EQU 1
00000000  =00000002                130  GET_NUM_WORMS_LEFT              EQU 2
00000000  =00000003                131  GET_IS_WORM_ON_HOOK             EQU 3
00000000                           132  
00000000                           133  *-------------------GAME STATES--------------------*
00000000  =00000000                134  MAIN_GAME_STATE                 EQU 0
00000000  =00000001                135  DO_MULLET_SETUP_STATE           EQU 1
00000000  =00000002                136  MULLET_SEQUENCE_RUNNING_STATE   EQU 2
00000000  =00000003                137  MULLET_CAUGHT_STATE             EQU 3
00000000  =00000004                138  MULLET_ESCAPED_STATE            EQU 4
00000000                           139  
00000000                           140  *-------------------GAME SETTINGS------------------*
00000000  =0000000E                141  NUMBER_OF_FISH_TO_SPAWN         EQU 14
00000000  =00000005                142  MULLET_SCORE_BONUS              EQU 5
00000000                           143  
00000000                           144  *-----------------------OTHER----------------------*
00000000  =00000006                145  MAX_GAME_OBJECTS                EQU 6
00000000  =00000003                146  NUM_BONUS_GAME_OBJECTS          EQU 3
00000000  =0000008A                147  PA_OFFSET                       EQU $8A                 ; Offset in bitmap to pixel array
00000000                           148  
00001000                           149  START   ORG     $1000
00001000                           150  
00001000                           151  *------------------------------------------------------------------------------------*
00001000                           152  *-----------------------------------One-Time-Setup-----------------------------------*
00001000                           153  *------------------------------------------------------------------------------------*
00001000  4EB9 0060F7E0            154      jsr OneTimeGameSetup                                ; Enable double buffering, play music, change screen size
00001006  4EB9 0007BCB4            155      jsr SaveFileInitialization                          ; Get save data or create blank save if none exists
0000100C  4EB9 0000114A            156      jsr SaveGameObjectBitmaps                           ; Saves all GameObject bitmaps for use in QuickDraw
00001012                           157      
00001012                           158  RestartPoint
00001012                           159  
00001012                           160  *------------------------------------------------------------------------------------*
00001012                           161  *------------------------------------Title-Screen------------------------------------*
00001012                           162  *------------------------------------------------------------------------------------*
00001012  4EB9 004521B8            163      jsr TitleScreenSetup                                ; Draw title screen bitmap
00001018                           164  TitleScreenLoop
00001018                           165  
00001018  4EB9 0007BD16            166      jsr DeleteSaveData                                  ; Delete save data if player presses backspace
0000101E                           167      
0000101E                           168      * Check for mouse click input 
0000101E  703D                     169      move.l #MOUSE_INPUT_TRAP_CODE, d0
00001020  7200                     170      moveq #0, d1                                        ; Set mode to "read mouse down state"
00001022  4E4F                     171      trap #15
00001024  0800 0000                172      btst #0, d0                                         ; Check "mouse down" state
00001028  67EE                     173      beq.s TitleScreenLoop                               ; Loop if mouse button was not pressed
0000102A                           174    
0000102A                           175  *------------------------------------------------------------------------------------*
0000102A                           176  *--------------------------------------Pre-Game--------------------------------------*
0000102A                           177  *------------------------------------------------------------------------------------*
0000102A  4EB9 0007B8CC            178      jsr SeedRandomNumber
00001030  4EB9 002812BC            179      jsr PreGameSetup                                    ; Draws inital background bitmap and loading icons 
00001036  4EB9 002814D6            180      jsr SpawnInitialGameObjects                         ; Add the inital GameObjects to the GameObject table
0000103C  4EB9 002813D6            181      jsr VariableInitialization                          ; Initialize variables and tables to starting values
00001042                           182      
00001042                           183  *------------------------------------------------------------------------------------*
00001042                           184  *-----------------------------------Main-Game-Loop-----------------------------------*
00001042                           185  *------------------------------------------------------------------------------------*
00001042                           186  MainGameLoop
00001042  4EB9 0060F8DA            187      jsr DrawGameObjects                                 ; Draws the current GameObject
00001048  4EB9 0060F9FE            188      jsr MouseInputHandler                               ; Gets mouse-y input and saves it to variable
0000104E  4EB9 0060FA2E            189      jsr MoveEyes                                        ; Moves eyes if mouse is above the ice
00001054  4EB9 0060FB22            190      jsr CheckForCollision                               ; Checks for collision with mouse and GameObject
0000105A  4EB9 0060FC64            191      jsr FleeingFishPhysicsUpdate                        ; Upadates and draws the fleeing fish physics object
00001060  4EB9 0060FD4E            192      jsr CatchFish                                       ; Catches a fish if the player clicks above the ice and has a fish on the line
00001066  4EB9 0060FE00            193      jsr GetNewWorm                                      ; Gets a new worm if the player clicks above the ice and needs a worm
0000106C  4EB9 0060FEB2            194      jsr BoundsCheck                                     ; Checks for GameObjects leaving the screen and spawns new ones
00001072  4EB9 0060FF14            195      jsr DrawFishingUI                                   ; Draws UI elements such as the bait, bobber, line, and caught fish
00001078                           196  
00001078                           197      * FrameUpdate only happens if TimeGoal has been met
00001078  4EB9 0061020A            198      jsr FrameUpdate
0000107E                           199      
0000107E                           200      * Start mullet sequence if correct number of fish have been spawned
0000107E  43F9 00610288            201      lea GameState, a1
00001084  0C11 0001                202      cmpi.b #DO_MULLET_SETUP_STATE, (a1)
00001088  6606                     203      bne.s NotReadyForMullet                             ; Skip MulletSequenceSetup if the state is not DO_MULLET_SETUP_STATE
0000108A  4EB9 0060F864            204      jsr MulletSequenceSetup                             ; Reset looping variables, spawn fish and mullet
00001090                           205  NotReadyForMullet
00001090                           206      
00001090                           207      * Keep looping in MainGameLoop if mullet hasn't been caught or hasn't escaped
00001090  43F9 00610288            208      lea GameState, a1
00001096  0C11 0003                209      cmpi.b #MULLET_CAUGHT_STATE, (a1)
0000109A  6DA6                     210      blt MainGameLoop
0000109C                           211      
0000109C                           212  *------------------------------------------------------------------------------------*
0000109C                           213  *-------------------------------------Game-Over--------------------------------------*
0000109C                           214  *------------------------------------------------------------------------------------*
0000109C                           215  GameOver
0000109C  4EB9 0007BD88            216      jsr GetPlayerName                                   ; Gets a 3-character player name
000010A2  4EB9 0007BE74            217      jsr AddScoreToLeaderboard                           ; Adds name and score to leaderboard (if it qualifies) and save it to file
000010A8  4EB9 001599AA            218      jsr GameOverLoading                                 ; Draws game over screen and player score
000010AE  4EB9 0007BECE            219      jsr DrawLeaderboard                                 ; Draws the leaderboard with names and scores
000010B4                           220  
000010B4                           221  *------------------------------------------------------------------------------------*
000010B4                           222  *----------------------------------Restart-Game-Loop---------------------------------*
000010B4                           223  *------------------------------------------------------------------------------------*    
000010B4                           224  RestartGameLoop    
000010B4                           225      * Check for mouse click input 
000010B4  703D                     226      move.l #MOUSE_INPUT_TRAP_CODE, d0
000010B6  7200                     227      moveq #0, d1                                        ; Set mode to "read mouse down state"
000010B8  4E4F                     228      trap #15
000010BA  0800 0000                229      btst #0, d0                                         ; Check "mouse down" state
000010BE  6600 FF52                230      bne RestartPoint                                    ; Branch to restart the game if the mouse is clicked
000010C2                           231      
000010C2                           232      * Poll for Escape Key
000010C2  7013                     233      move.l #GET_KEY_STATE_TRAP_CODE, d0
000010C4  721B                     234      move.l #EscapeASCIIValue, d1
000010C6  4E4F                     235      trap #15
000010C8                           236      
000010C8  0801 0000                237      btst.l #0, d1                                       ; Test for escape pressed
000010CC  67E6                     238      beq.s RestartGameLoop                               ; Loop if escape has not been pressed
000010CE                           239      
000010CE  4EB9 0060F8C4            240      jsr GameExitCleanup                                 ; Turn off music and clear screen
000010D4                           241  
000010D4  FFFF FFFF                242      SIMHALT
000010D8                           243  
000010D8                           244  *--------------------FUNCTION INCLUDES--------------------*
000010D8                           245      INCLUDE "OptimizedGameObjectDrawing.X68"
000010D8                           246  
000010D8  =00000018                247  SAVE_OFFSET                     EQU 24
000010D8  =00000014                248  SAVE_LOCATION                   EQU 20
000010D8  =00000010                249  SAVE_WIDTH                      EQU 16
000010D8  =0000000C                250  SAVE_HEIGHT                     EQU 12        
000010D8  =00000008                251  DISPLAY_SAVE_X                  EQU 8
000010D8  =00000004                252  DISPLAY_SAVE_Y                  EQU 4
000010D8                           253  
000010D8  =00000028                254  GET_DESTINATION_ADDRESS_Q       EQU 40
000010D8  =00000024                255  GET_PIXEL_ARRAY_OFFSET_LOCAL_Q  EQU 36
000010D8  =00000020                256  GET_BMAP_WIDTH_LOCAL_Q          EQU 32
000010D8  =0000001C                257  GET_BMAP_HEIGHT_LOCAL_Q         EQU 28
000010D8  =00000018                258  BMP_SIGNATURE_LOCAL_Q           EQU 24
000010D8  =00000014                259  CHUNK_START_X_LOCAL_Q           EQU 20
000010D8  =00000010                260  CHUNK_START_Y_LOCAL_Q           EQU 16
000010D8  =0000000C                261  CHUNK_WIDTH_LOCAL_Q             EQU 12
000010D8  =00000008                262  CHUNK_HEIGHT_LOCAL_Q            EQU 8        
000010D8  =00000000                263  ROW_OFFSET_LOCAL_Q              EQU 0
000010D8                           264  
000010D8  =00000024                265  QUICK_REFORMAT_STACK_SIZE       EQU 36
000010D8  =00000018                266  QUICK_DRAW_STACK_SIZE           EQU 24
000010D8                           267  
000010D8                           268  
000010D8                           269  QuickDrawReformat
000010D8  594F                     270      subq #4, sp                                 ; Make space for local variable on stack
000010DA                           271      
000010DA                           272      * Get ptr to destination
000010DA  226F 0028                273      move.l GET_DESTINATION_ADDRESS_Q(sp), a1
000010DE                           274  
000010DE                           275      * Get ptr to bitmap
000010DE  206F 0018                276      move.l BMP_SIGNATURE_LOCAL_Q(sp), a0
000010E2                           277      
000010E2                           278      * Get offset of pixel array
000010E2  202F 0024                279      move.l GET_PIXEL_ARRAY_OFFSET_LOCAL_Q(sp), d0
000010E6                           280      
000010E6                           281      * Get Bitmap width
000010E6  2C2F 0020                282      move.l GET_BMAP_WIDTH_LOCAL_Q(sp), d6
000010EA  2E06                     283      move.l d6, d7
000010EC                           284      
000010EC                           285      * Get Bitmap height
000010EC  2A2F 001C                286      move.l GET_BMAP_HEIGHT_LOCAL_Q(sp), d5
000010F0                           287      
000010F0                           288      * Add offset to a0
000010F0  D1C0                     289      add.l d0, a0
000010F2  7000                     290      moveq #0, d0
000010F4                           291      
000010F4                           292      * Set starting values
000010F4  2605                     293      move.l d5, d3
000010F6  2A2F 0008                294      move.l CHUNK_HEIGHT_LOCAL_Q(sp), d5
000010FA  5345                     295      subq #1, d5                                 ; Adjust for dbra
000010FC                           296      
000010FC                           297      * Calculate and store row offset
000010FC  2207                     298      move.l d7, d1                               ; d1 = bitmap width
000010FE  92AF 000C                299      sub.l CHUNK_WIDTH_LOCAL_Q(sp), d1           ; d1 = (bitmap width - CHUNK_WIDTH)
00001102  E589                     300      lsl.l #2, d1                                ; multiply by 4 (since there are 4 bytes per pixel
00001104  2F41 0000                301      move.l d1, ROW_OFFSET_LOCAL_Q(sp)           ; move row offset to stack (local variable)
00001108                           302  
00001108                           303      * Increment in pixel array to correct starting spot
00001108  2207                     304      move.l d7, d1                               ; d1 = bitmap width
0000110A  96AF 0010                305      sub.l CHUNK_START_Y_LOCAL_Q(sp), d3
0000110E  96AF 0008                306      sub.l CHUNK_HEIGHT_LOCAL_Q(sp), d3
00001112  C2C3                     307      mulu d3, d1                                 ; d1 = (bitmap width * (bitmap_height-CHUNK_START_Y-CHUNK_HEIGHT))
00001114  D2AF 0014                308      add.l CHUNK_START_X_LOCAL_Q(sp), d1         ; d1 = bitmap width * (bitmap_height-CHUNK_START_Y-CHUNK_HEIGHT))) + X
00001118  E589                     309      lsl.l #2, d1                                ; multiply by 4 (since there are 4 bytes per pixel)                          
0000111A  41F0 1800                310      lea (a0, d1.l), a0
0000111E                           311  
0000111E                           312  SaveRows
0000111E  2C2F 000C                313      move.l CHUNK_WIDTH_LOCAL_Q(sp), d6
00001122  5346                     314      subq.w #1, d6                               ; Adjust for dbra
00001124                           315  SaveRow
00001124                           316      * Store Color
00001124  2218                     317      move.l (a0)+, d1 
00001126  1001                     318      move.b d1, d0                               ; Store alpha value in d0
00001128  123C 0001                319      move.b #1, d1                               ; clear alpha value
0000112C  1000                     320      move.b d0, d0                               ; move byte so 0-flag is set for compare
0000112E  6702                     321      beq.s Transparent
00001130  5341                     322      subq #1, d1
00001132                           323  Transparent
00001132                           324      
00001132  E099                     325      ror.l #8, d1
00001134  22C1                     326      move.l d1, (a1)+
00001136                           327  
00001136  51CE FFEC                328      dbra d6, SaveRow
0000113A                           329      * Increment to next row
0000113A  222F 0000                330      move.l ROW_OFFSET_LOCAL_Q(sp), d1
0000113E  41F0 1000                331      lea (a0, d1), a0
00001142  51CD FFDA                332      dbra d5, SaveRows
00001146  588F                     333      add.l   #4, sp                              ; fix stack from local variable
00001148  4E75                     334      rts
0000114A                           335  
0000114A                           336  
0000114A                           337  SaveGameObjectBitmaps
0000114A  45F9 000012E8            338      lea FISH_BITMAP, a2
00001150  41F9 0003EC44            339      lea FishQuickSave, a0
00001156  2F08                     340      move.l a0, -(sp)                                    ; Destination
00001158  2F3C 0000008A            341      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
0000115E  2F3C 00000048            342      move.l #FISH_WIDTH, -(sp)                           ; Bitmap Width
00001164  2F3C 00000090            343      move.l #(FISH_HEIGHT*4), -(sp)                      ; Bitmap Height
0000116A  2F0A                     344      move.l a2, -(sp)                                    ; Bitmap Signature
0000116C  2F3C 00000000            345      move.l #0, -(sp)                                    ; Bitmap Chunk X
00001172  2F3C 00000000            346      move.l #0, -(sp)                                    ; Bitmap Chunk Y
00001178  2F3C 00000048            347      move.l #FISH_WIDTH, -(sp)                           ; Bitmap Chunk Width
0000117E  2F3C 00000090            348      move.l #(FISH_HEIGHT*4), -(sp)                      ; Bitmap Chunk Height
00001184  4EB8 10D8                349      jsr QuickDrawReformat 
00001188  DFFC 00000024            350      add.l #QUICK_REFORMAT_STACK_SIZE, sp
0000118E                           351      
0000118E  45F9 0000B572            352      lea FISH_BITMAP_FLIPPED , a2
00001194  41F9 00048E44            353      lea FlippedFishQuickSave, a0
0000119A  2F08                     354      move.l a0, -(sp)                                    ; Destination
0000119C  2F3C 0000008A            355      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
000011A2  2F3C 00000048            356      move.l #FISH_WIDTH, -(sp)                           ; Bitmap Width
000011A8  2F3C 00000090            357      move.l #(FISH_HEIGHT*4), -(sp)                      ; Bitmap Height
000011AE  2F0A                     358      move.l a2, -(sp)                                    ; Bitmap Signature
000011B0  2F3C 00000000            359      move.l #0, -(sp)                                    ; Bitmap Chunk X
000011B6  2F3C 00000000            360      move.l #0, -(sp)                                    ; Bitmap Chunk Y
000011BC  2F3C 00000048            361      move.l #FISH_WIDTH, -(sp)                           ; Bitmap Chunk Width
000011C2  2F3C 00000090            362      move.l #(FISH_HEIGHT*4), -(sp)                      ; Bitmap Chunk Height
000011C8  4EB8 10D8                363      jsr QuickDrawReformat 
000011CC  DFFC 00000024            364      add.l #QUICK_REFORMAT_STACK_SIZE, sp
000011D2                           365      
000011D2  45F9 00035BBA            366      lea BOOT_BITMAP, a2
000011D8  41F9 00053044            367      lea BootQuickSave, a0
000011DE  2F08                     368      move.l a0, -(sp)                                    ; Destination
000011E0  2F3C 0000008A            369      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
000011E6  2F3C 00000030            370      move.l #BOOT_WIDTH, -(sp)                           ; Bitmap Width
000011EC  2F3C 000000C0            371      move.l #(BOOT_HEIGHT*4), -(sp)                      ; Bitmap Height
000011F2  2F0A                     372      move.l a2, -(sp)                                    ; Bitmap Signature
000011F4  2F3C 00000000            373      move.l #0, -(sp)                                    ; Bitmap Chunk X
000011FA  2F3C 00000000            374      move.l #0, -(sp)                                    ; Bitmap Chunk Y
00001200  2F3C 00000030            375      move.l #BOOT_WIDTH, -(sp)                           ; Bitmap Chunk Width
00001206  2F3C 000000C0            376      move.l #(BOOT_HEIGHT*4), -(sp)                      ; Bitmap Chunk Height
0000120C  4EB8 10D8                377      jsr QuickDrawReformat 
00001210  DFFC 00000024            378      add.l #QUICK_REFORMAT_STACK_SIZE, sp
00001216                           379  
00001216  45F9 0002CB30            380      lea JELLY_BITMAP, a2
0000121C  41F9 0005C044            381      lea JellyQuickSave, a0
00001222  2F08                     382      move.l a0, -(sp)                                    ; Destination
00001224  2F3C 0000008A            383      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
0000122A  2F3C 00000030            384      move.l #JELLY_WIDTH, -(sp)                          ; Bitmap Width
00001230  2F3C 000000C0            385      move.l #(JELLY_HEIGHT*4), -(sp)                     ; Bitmap Height
00001236  2F0A                     386      move.l a2, -(sp)                                    ; Bitmap Signature
00001238  2F3C 00000000            387      move.l #0, -(sp)                                    ; Bitmap Chunk X
0000123E  2F3C 00000000            388      move.l #0, -(sp)                                    ; Bitmap Chunk Y
00001244  2F3C 00000030            389      move.l #JELLY_WIDTH, -(sp)                          ; Bitmap Chunk Width
0000124A  2F3C 000000C0            390      move.l #(JELLY_HEIGHT*4), -(sp)                     ; Bitmap Chunk Height
00001250  4EB8 10D8                391      jsr QuickDrawReformat 
00001254  DFFC 00000024            392      add.l #QUICK_REFORMAT_STACK_SIZE, sp
0000125A                           393  
0000125A  45F9 000162A6            394      lea MULLET_BITMAP, a2
00001260  41F9 00065044            395      lea MulletQuickSave, a0
00001266  2F08                     396      move.l a0, -(sp)                                    ; Destination
00001268  2F3C 0000008A            397      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
0000126E  2F3C 00000078            398      move.l #MULLET_WIDTH, -(sp)                         ; Bitmap Width
00001274  2F3C 000000C0            399      move.l #(MULLET_HEIGHT*4), -(sp)                    ; Bitmap Height
0000127A  2F0A                     400      move.l a2, -(sp)                                    ; Bitmap Signature
0000127C  2F3C 00000000            401      move.l #0, -(sp)                                    ; Bitmap Chunk X
00001282  2F3C 00000000            402      move.l #0, -(sp)                                    ; Bitmap Chunk Y
00001288  2F3C 00000078            403      move.l #MULLET_WIDTH, -(sp)                         ; Bitmap Chunk Width
0000128E  2F3C 000000C0            404      move.l #(MULLET_HEIGHT*4), -(sp)                    ; Bitmap Chunk Height
00001294  4EB8 10D8                405      jsr QuickDrawReformat 
00001298  DFFC 00000024            406      add.l #QUICK_REFORMAT_STACK_SIZE, sp
0000129E                           407  
0000129E  4E75                     408      rts
000012A0                           409      
000012A0                           410  
000012A0                           411  QuickDraw
000012A0                           412  
000012A0                           413      * Get saved pixel data and adjust for offset
000012A0  206F 0014                414      move.l SAVE_LOCATION(sp), a0
000012A4  202F 0018                415      move.l SAVE_OFFSET(sp), d0
000012A8  E588                     416      lsl.l #2, d0
000012AA  41F0 0800                417      lea (a0, d0.l), a0
000012AE                           418      
000012AE                           419      * Set starting values
000012AE  242F 0004                420      move.l DISPLAY_SAVE_Y(sp), d2           ; Set Starting Y
000012B2  5342                     421      subq #1, d2
000012B4  D4AF 000C                422      add.l SAVE_HEIGHT(sp), d2
000012B8  2A2F 000C                423      move.l SAVE_HEIGHT(sp), d5              ; Set Y loop Counter
000012BC  5345                     424      subq #1, d5                             ; Adjust for dbra
000012BE                           425  
000012BE                           426  QuickDrawRows
000012BE  262F 0008                427      move.l DISPLAY_SAVE_X(sp), d3           ; Set Starting X
000012C2  2C2F 0010                428      move.l SAVE_WIDTH(sp), d6               ; Set X loop Counter
000012C6  5346                     429      subq #1, d6                             ; Adjust for dbra
000012C8                           430  QuickDrawRow
000012C8                           431      * Set Pen Color
000012C8  7050                     432      move.l #PEN_COLOR_TRAP_CODE, d0
000012CA  2218                     433      move.l (a0)+, d1
000012CC  0801 0018                434      btst #24, d1                            ; Check 24th bit for transparency
000012D0  6608                     435      bne.s DoNotDrawPixel
000012D2  4E4F                     436      trap #15
000012D4                           437     
000012D4                           438      * Draw Pixel
000012D4  2203                     439      move.l d3, d1
000012D6  7052                     440      move.l #DRAW_PIXEL_TRAP_CODE, d0
000012D8  4E4F                     441      trap #15
000012DA                           442  DoNotDrawPixel
000012DA  5243                     443      addq #1, d3                             ; Increment Position-X
000012DC  51CE FFEA                444      dbra d6, QuickDrawRow
000012E0  5342                     445      subq #1, d2                             ; Increment Position-Y
000012E2  51CD FFDA                446      dbra d5, QuickDrawRows
000012E6  4E75                     447      rts
000012E8                           448  
000012E8                           449  
000012E8                           450  
000012E8                           451  FISH_BITMAP     
000012E8                           452      INCBIN "Assets\fish.bmp"
0000B572                           453  END_FISH_BITMAP
0000B572                           454  
0000B572                           455  FISH_BITMAP_FLIPPED     
0000B572                           456      INCBIN "Assets\fish_flipped.bmp"
000157FC                           457  END_FISH_BITMAP_FLIPPED
000157FC                           458  
000157FC                           459  CAUGHT_FISH_BITMAP  
000157FC                           460      INCBIN "Assets\caught_fish.bmp"
000162A6                           461  END_CAUGHT_FISH_BITMAP
000162A6                           462  
000162A6                           463  MULLET_BITMAP   
000162A6                           464      INCBIN "Assets\mullet.bmp"
0002CB30                           465  END_MULLET_BITMAP
0002CB30                           466  
0002CB30                           467  JELLY_BITMAP    
0002CB30                           468      INCBIN "Assets\jelly.bmp"
00035BBA                           469  END_JELLY_BITMAP
00035BBA                           470  
00035BBA                           471  BOOT_BITMAP     
00035BBA                           472      INCBIN "Assets\boot.bmp"
0003EC44                           473  END_BOOT_BITMAP
0003EC44                           474  
0003EC44                           475  FishQuickSave ds.l (FISH_WIDTH*FISH_HEIGHT*4)
00048E44                           476  FlippedFishQuickSave ds.l (FISH_WIDTH*FISH_HEIGHT*4)
00053044                           477  BootQuickSave ds.l (BOOT_WIDTH*BOOT_HEIGHT*4)
0005C044                           478  JellyQuickSave ds.l (JELLY_WIDTH*JELLY_HEIGHT*4)
00065044                           479  MulletQuickSave ds.l (MULLET_WIDTH*MULLET_HEIGHT*4)
0007B844                           480  
0007B844                           481  
0007B844                           482  -------------------- end include --------------------
0007B844                           483      INCLUDE "BitmapChunker.X68"
0007B844                           484  
0007B844  =00000030                485  GET_PIXEL_ARRAY_OFFSET_LOCAL    EQU 48
0007B844  =0000002C                486  GET_BMAP_WIDTH_LOCAL            EQU 44
0007B844  =00000028                487  GET_BMAP_HEIGHT_LOCAL           EQU 40
0007B844  =00000024                488  BMP_SIGNATURE_LOCAL             EQU 36
0007B844  =00000020                489  CHUNK_START_X_LOCAL             EQU 32
0007B844  =0000001C                490  CHUNK_START_Y_LOCAL             EQU 28
0007B844  =00000018                491  CHUNK_WIDTH_LOCAL               EQU 24
0007B844  =00000014                492  CHUNK_HEIGHT_LOCAL              EQU 20        
0007B844  =00000010                493  DISPLAY_X_LOCAL                 EQU 16
0007B844  =0000000C                494  DISPLAY_Y_LOCAL                 EQU 12
0007B844  =00000004                495  ROW_OFFSET_LOCAL                EQU 4
0007B844                           496  
0007B844  =00000028                497  BM_CHUNKER_STACK_SIZE           EQU 40
0007B844  =00000008                498  COLOR_DATA_SHIFT                EQU 8
0007B844                           499  
0007B844                           500  DisplayBitmapChunk
0007B844  594F                     501      subq #4, sp                           ; Make space for local variable on stack
0007B846  48E7 0100                502      movem.l d7, -(sp)
0007B84A                           503  
0007B84A                           504      * Get ptr to bitmap
0007B84A  206F 0024                505      move.l BMP_SIGNATURE_LOCAL(sp), a0
0007B84E                           506      
0007B84E                           507      * Get offset of pixel array
0007B84E  202F 0030                508      move.l GET_PIXEL_ARRAY_OFFSET_LOCAL(sp), d0
0007B852                           509      
0007B852                           510      * Get Bitmap width
0007B852  2C2F 002C                511      move.l GET_BMAP_WIDTH_LOCAL(sp), d6
0007B856  2E06                     512      move.l d6, d7
0007B858                           513      
0007B858                           514      * Get Bitmap height
0007B858  2A2F 0028                515      move.l GET_BMAP_HEIGHT_LOCAL(sp), d5
0007B85C                           516      
0007B85C                           517      * Add offset to a0
0007B85C  D1C0                     518      add.l d0, a0
0007B85E  7000                     519      moveq #0, d0
0007B860                           520      
0007B860                           521      * Set starting values
0007B860  242F 000C                522      move.l DISPLAY_Y_LOCAL(sp), d2          ; Set Starting Y
0007B864  5342                     523      subq #1, d2
0007B866  D4AF 0014                524      add.l CHUNK_HEIGHT_LOCAL(sp), d2
0007B86A  2605                     525      move.l d5, d3
0007B86C  2A2F 0014                526      move.l CHUNK_HEIGHT_LOCAL(sp), d5
0007B870  5345                     527      subq #1, d5                           ; Adjust for dbra
0007B872                           528      
0007B872                           529      * Calculate and store row offset
0007B872  2207                     530      move.l d7, d1                           ; d1 = bitmap width
0007B874  92AF 0018                531      sub.l CHUNK_WIDTH_LOCAL(sp), d1         ; d1 = (bitmap width - CHUNK_WIDTH)
0007B878  E589                     532      lsl.l #2, d1                            ; multiply by 4 (since there are 4 bytes per pixel
0007B87A  2F41 0004                533      move.l d1, ROW_OFFSET_LOCAL(sp)         ; move row offset to stack (local variable)
0007B87E                           534  
0007B87E                           535      * Increment in pixel array to correct starting spot
0007B87E  2207                     536      move.l d7, d1                           ; d1 = bitmap width
0007B880  96AF 001C                537      sub.l CHUNK_START_Y_LOCAL(sp), d3
0007B884  96AF 0014                538      sub.l CHUNK_HEIGHT_LOCAL(sp), d3
0007B888  C2C3                     539      mulu d3, d1                             ; d1 = (bitmap width * (bitmap_height-CHUNK_START_Y-CHUNK_HEIGHT))
0007B88A  D2AF 0020                540      add.l CHUNK_START_X_LOCAL(sp), d1       ; d1 = bitmap width * (bitmap_height-CHUNK_START_Y-CHUNK_HEIGHT))) + X
0007B88E  E589                     541      lsl.l #2, d1                            ; multiply by 4 (since there are 4 bytes per pixel)                          
0007B890  41F0 1800                542      lea (a0, d1.l), a0
0007B894                           543  
0007B894                           544  DrawRows
0007B894  262F 0010                545      move.l DISPLAY_X_LOCAL(sp), d3          ; Set Starting X
0007B898  2C2F 0018                546      move.l CHUNK_WIDTH_LOCAL(sp), d6
0007B89C  5346                     547      subq.w #1, d6                           ; Adjust for dbra
0007B89E                           548  DrawRow
0007B89E                           549      * Set Pen Color
0007B89E  7050                     550      move.l #PEN_COLOR_TRAP_CODE, d0
0007B8A0  2218                     551      move.l (a0)+, d1
0007B8A2  1201                     552      move.b d1, d1
0007B8A4  670A                     553      beq.s TransparentPixel
0007B8A6  E089                     554      lsr.l #COLOR_DATA_SHIFT , d1            ; Shift from [BB GG RR 00] to [00 BB GG RR]
0007B8A8  4E4F                     555      trap #15
0007B8AA                           556     
0007B8AA                           557      * Draw Pixel
0007B8AA  2203                     558      move.l d3, d1
0007B8AC  7052                     559      move.l #DRAW_PIXEL_TRAP_CODE, d0
0007B8AE  4E4F                     560      trap #15
0007B8B0                           561  TransparentPixel
0007B8B0  5243                     562      addq.w #1, d3                           ; Increment Position-X
0007B8B2  51CE FFEA                563      dbra d6, DrawRow
0007B8B6  5342                     564      subq #1, d2                           ; Increment Position-Y
0007B8B8                           565      * Increment to next row
0007B8B8  222F 0004                566      move.l ROW_OFFSET_LOCAL(sp), d1
0007B8BC  41F0 1000                567      lea (a0, d1), a0
0007B8C0  51CD FFD2                568      dbra d5, DrawRows
0007B8C4  4CDF 0080                569      movem.l (sp)+, d7
0007B8C8  588F                     570      add.l   #4, sp                          ; fix stack from local variable
0007B8CA  4E75                     571      rts
0007B8CC                           572  
0007B8CC                           573  
0007B8CC                           574  
0007B8CC                           575  
0007B8CC                           576  
0007B8CC                           577  
0007B8CC                           578  
0007B8CC                           579  
0007B8CC                           580  
0007B8CC                           581  
0007B8CC                           582  
0007B8CC                           583  
0007B8CC                           584  
0007B8CC                           585  
0007B8CC                           586  
0007B8CC                           587  
0007B8CC                           588  
0007B8CC                           589  
0007B8CC                           590  -------------------- end include --------------------
0007B8CC                           591      INCLUDE "RandomNumbers.X68"
0007B8CC                           592  
0007B8CC                           593  SeedRandomNumber
0007B8CC  4286                     594          clr.l   d6
0007B8CE  103C 0008                595          move.b  #GET_TIME_TRAP_CODE, d0
0007B8D2  4E4F                     596          TRAP    #15
0007B8D4  23C1 0007B8FE            597          move.l  d1, RandomVal
0007B8DA  4E75                     598          rts
0007B8DC                           599  
0007B8DC                           600  GetRandomByteIntoD6
0007B8DC  2039 0007B8FE            601          move.l  RandomVal, d0
0007B8E2  72AF                     602          moveq   #$AF-$100, d1
0007B8E4  7412                     603          moveq   #18, d2
0007B8E6                           604  Ninc0   
0007B8E6  D080                     605      add.l   d0, d0
0007B8E8  6400 0004                606      bcc Ninc1
0007B8EC  B300                     607      eor.b   d1,d0
0007B8EE                           608  Ninc1
0007B8EE  51CA FFF6                609      dbf d2, Ninc0
0007B8F2                           610      
0007B8F2  23C0 0007B8FE            611      move.l  d0, RandomVal 
0007B8F8  4286                     612      clr.l   d6
0007B8FA  1C00                     613      move.b  d0, d6
0007B8FC                           614      
0007B8FC  4E75                     615          rts
0007B8FE                           616          
0007B8FE                           617  RandomVal ds.l 1
0007B902                           618  
0007B902                           619  -------------------- end include --------------------
0007B902                           620      INCLUDE "SpawnGameObject.X68"
0007B902                           621  
0007B902  =00000006                622  RAND_BYTE_TO_2_BITS             EQU 6
0007B902                           623  
0007B902                           624  SpawnGameObject
0007B902  4EB9 0007B8DC            625      jsr GetRandomByteIntoD6
0007B908                           626      
0007B908                           627      * Set spawn point based on direction of speed
0007B908  7A00                     628      moveq #0, d5
0007B90A  0445 0048                629      sub.w #FISH_WIDTH, d5
0007B90E  102D 0002                630      move.b GET_SPEED(a5), d0                            ; Get speed from GameObject table
0007B912  6A04                     631      bpl.b PosSpeed
0007B914  3A3C 02F8                632      move.w #OUTPUT_WINDOW_WIDTH, d5
0007B918                           633  PosSpeed
0007B918                           634  
0007B918                           635      * Move spawn point to x-position
0007B918  3B45 0000                636      move.w d5, GET_X_POS(a5)
0007B91C                           637      
0007B91C                           638      * Switch speed to opposite of current speed
0007B91C  162D 0002                639      move.b GET_SPEED(a5), d3
0007B920                           640      
0007B920                           641      * Set speed to fast-right if previous speed was slow-right
0007B920  0C03 0005                642      cmpi.b #SLOW_RIGHT, d3
0007B924  6606                     643      bne.s NotSlowRight
0007B926  1B7C 0007 0002           644      move.b #FAST_RIGHT, GET_SPEED(a5)
0007B92C                           645  NotSlowRight
0007B92C                           646  
0007B92C                           647      * Set speed to slow-right if previous speed was fast-right
0007B92C  0C03 0007                648      cmpi.b #FAST_RIGHT, d3
0007B930  6606                     649      bne.s NotFastRight
0007B932  1B7C 0005 0002           650      move.b #SLOW_RIGHT, GET_SPEED(a5)
0007B938                           651  NotFastRight
0007B938                           652  
0007B938                           653      * Set speed to fast-left if previous speed was slow-left 
0007B938  0C03 00FB                654      cmpi.b #SLOW_LEFT, d3
0007B93C  6606                     655      bne.s NotSlowLeft
0007B93E  1B7C 00F9 0002           656      move.b #FAST_LEFT, GET_SPEED(a5)
0007B944                           657  NotSlowLeft
0007B944                           658  
0007B944                           659      * Set speed to slow-left if previous speed was fast-left 
0007B944  0C03 00F9                660      cmpi.b #FAST_LEFT, d3
0007B948  6606                     661      bne.s NotFastLeft
0007B94A  1B7C 00FB 0002           662      move.b #SLOW_LEFT, GET_SPEED(a5)
0007B950                           663  NotFastLeft
0007B950                           664      
0007B950                           665      * Add variation to x-pos if in lane 0
0007B950  182D 0003                666      move.b GET_LANE(a5), d4 
0007B954  0C04 0000                667      cmpi.b #0, d4
0007B958  6604                     668      bne.s SkipRandomOffset
0007B95A  9D6D 0000                669      sub.w d6, GET_X_POS(a5)
0007B95E                           670  SkipRandomOffset
0007B95E                           671  
0007B95E                           672      * Set random type
0007B95E  EC0E                     673      lsr.b #RAND_BYTE_TO_2_BITS, d6
0007B960  6702                     674      beq.s SkipSubtract                                          
0007B962  5346                     675      subq #1, d6                                                 ; If the type is not 0, subtract 1 (brings range to 0, 1, 2)
0007B964                           676  SkipSubtract
0007B964  1B46 0004                677      move.b d6, GET_TYPE(a5)
0007B968                           678      
0007B968                           679      * If max number have fish have spawned, only spawn invisible GameObjects
0007B968  41F9 00610292            680      lea NumFishSpawned, a0
0007B96E  0C10 000E                681      cmpi.b #NUMBER_OF_FISH_TO_SPAWN, (a0)
0007B972  6D10                     682      blt.s SkipSpawnInvisible
0007B974  1B7C 0003 0004           683      move.b #INVISIBLE_TYPE, GET_TYPE(a5)                        ; Make GameObject invisible
0007B97A  1C3C 0003                684      move.b #INVISIBLE_TYPE, d6
0007B97E                           685      
0007B97E                           686      * Change game state if all GameObjects are invisible
0007B97E  4EB9 0007BC90            687      jsr DoneSpawningCheck
0007B984                           688      
0007B984                           689  SkipSpawnInvisible
0007B984                           690   
0007B984                           691      * Increase number of fish spawned (if type is 0)
0007B984  0C06 0000                692      cmpi.b #FISH_TYPE, d6
0007B988  6608                     693      bne.s NotAFish
0007B98A  41F9 00610292            694      lea NumFishSpawned, a0
0007B990  5210                     695      addi.b #1, (a0)
0007B992                           696  NotAFish
0007B992                           697      
0007B992                           698      * Set Frame to 0
0007B992  1B7C 0000 0005           699      move.b #FRAME_0, GET_FRAME(a5)
0007B998                           700      
0007B998  4E75                     701      rts
0007B99A                           702  
0007B99A                           703  
0007B99A                           704  -------------------- end include --------------------
0007B99A                           705      INCLUDE "HandleCollision.X68"
0007B99A                           706  
0007B99A                           707  HandleFishCollision
0007B99A                           708      
0007B99A                           709      * Set isFish flag if there is not already a fish on the line
0007B99A  45F9 00610284            710      lea FishingManagerTable, a2
0007B9A0  7000                     711      moveq #0, d0
0007B9A2  102A 0001                712      move.b GET_IS_FISH_ON_HOOK(a2), d0
0007B9A6  664C                     713      bne.s DontCatchFish
0007B9A8  102A 0003                714      move.b GET_IS_WORM_ON_HOOK(a2), d0
0007B9AC  6746                     715      beq.s DontCatchFish
0007B9AE  157C 0001 0001           716      move.b #1, GET_IS_FISH_ON_HOOK(a2)                          ; Set isFish flag to true
0007B9B4                           717      
0007B9B4                           718      * Get X-Coord and Lane
0007B9B4  204E                     719      move.l a6, a0
0007B9B6  43F9 0061028A            720      lea LocationTable, a1
0007B9BC  3A28 0000                721      move.w GET_X_POS(a0), d5                                    ; d5 = X-Coord
0007B9C0  7C00                     722      moveq #0, d6
0007B9C2  1C28 0003                723      move.b GET_LANE(a0), d6                                     ; d6 = Lane
0007B9C6  E30E                     724      lsl.b #1, d6
0007B9C8  3C31 6000                725      move.w (a1, d6), d6                                         ; d6 = Lane Location
0007B9CC                           726     
0007B9CC                           727      * Set Pen Color
0007B9CC  7050                     728      move.l #PEN_COLOR_TRAP_CODE, d0
0007B9CE  223C 00D28049            729      move.l #WATER_COLOR, d1
0007B9D4  4E4F                     730      trap #15
0007B9D6                           731      
0007B9D6                           732      * Draw Water Block
0007B9D6  3406                     733      move.w d6, d2
0007B9D8  3806                     734      move.w d6, d4
0007B9DA  0644 0012                735      addi.w #(FISH_HEIGHT/2), d4
0007B9DE  0442 0012                736      subi.w #(FISH_HEIGHT/2), d2
0007B9E2  3205                     737      move.w d5, d1
0007B9E4  3605                     738      move.w d5, d3
0007B9E6  0643 0048                739      addi.w #FISH_WIDTH, d3
0007B9EA  7057                     740      move.l #DRAW_RECT_TRAP_CODE, d0
0007B9EC  4E4F                     741      trap #15
0007B9EE                           742      
0007B9EE                           743      * Move an invisible fish into the spot the fish used to be
0007B9EE  117C 0003 0004           744      move.b #INVISIBLE_TYPE, GET_TYPE(a0)
0007B9F4                           745  DontCatchFish
0007B9F4  4E75                     746      rts
0007B9F6                           747  
0007B9F6                           748  
0007B9F6                           749  HandleBootCollision
0007B9F6                           750      * Remove fish from line
0007B9F6  43F9 00610284            751      lea FishingManagerTable, a1
0007B9FC  7000                     752      moveq #0, d0
0007B9FE  1029 0001                753      move.b GET_IS_FISH_ON_HOOK(a1), d0
0007BA02  6750                     754      beq.s NoFishOnLine
0007BA04  137C 0000 0001           755      move.b #0, GET_IS_FISH_ON_HOOK(a1)                          ; Set isFish flag to false
0007BA0A                           756      
0007BA0A                           757      * Fish Flee Sound Effect                        
0007BA0A  7049                     758      move.l #PLAY_SOUND_TRAP_CODE, d0
0007BA0C  43F9 0007BAB0            759      lea FishFlee, a1
0007BA12  4E4F                     760      trap #15
0007BA14                           761      
0007BA14                           762      * Get lane location of boot
0007BA14  204E                     763      move.l a6, a0
0007BA16  43F9 0061028A            764      lea LocationTable, a1
0007BA1C  7C00                     765      moveq #0, d6
0007BA1E  1C28 0003                766      move.b GET_LANE(a0), d6                                     ; d6 = Lane
0007BA22  E30E                     767      lsl.b #1, d6
0007BA24  3C31 6000                768      move.w (a1, d6), d6                                         ; d6 = Lane Location
0007BA28                           769      
0007BA28                           770      * Set starting x-velocity for physics animation
0007BA28  323C 0002                771      move.w #FISH_FLEE_X_VELOCITY, d1                            ; set velocity to positive
0007BA2C  1028 0002                772      move.b GET_SPEED(a0), d0
0007BA30  6A04                     773      bpl.b PositiveXVelocity
0007BA32  323C FFFE                774      move.w #-FISH_FLEE_X_VELOCITY, d1                           ; set velocity to negative if boot was moving left
0007BA36                           775  PositiveXVelocity
0007BA36                           776  
0007BA36                           777      * Set starting values for physics animation
0007BA36  45F9 0060FD42            778      lea FleeingFishPhysicsManager, a2
0007BA3C  3541 000A                779      move.w d1, GET_X_VELOCITY(a2)
0007BA40  357C 0166 0008           780      move.w #POLE_X-(CAUGHT_FISH_WIDTH/2), GET_X_POSITION(a2)
0007BA46  E98E                     781      lsl.l #NUM_FRACTIONAL_BITS, d6   
0007BA48  2546 0000                782      move.l d6, GET_Y_POSITION(a2)                               ; d5 = y-pos
0007BA4C  257C 00000000 0004       783      move.l #0, GET_Y_VELOCITY(a2)                               ; d6 = velocity
0007BA54                           784  
0007BA54                           785  NoFishOnLine
0007BA54  4E75                     786      rts
0007BA56                           787  
0007BA56                           788  
0007BA56                           789  HandleJellyCollision
0007BA56                           790      * Remove fish from line
0007BA56  43F9 00610284            791      lea FishingManagerTable, a1
0007BA5C  137C 0000 0001           792      move.b #0, GET_IS_FISH_ON_HOOK(a1)                          ; Set isFish flag to false
0007BA62                           793      
0007BA62                           794      * Remove bait if there is any of your line
0007BA62  7000                     795      moveq #0, d0
0007BA64  1029 0003                796      move.b GET_IS_WORM_ON_HOOK(a1), d0
0007BA68  6720                     797      beq.s NoBaitOnLine
0007BA6A                           798      
0007BA6A                           799      * End game if you lose all bait
0007BA6A  1029 0002                800      move.b GET_NUM_WORMS_LEFT(a1), d0
0007BA6E  660A                     801      bne.s StillHaveBaitLeft
0007BA70                           802      
0007BA70                           803      * Change Game State to MULLET_ESCAPED_STATE
0007BA70  45F9 00610288            804      lea GameState, a2
0007BA76  14BC 0004                805      move.b #MULLET_ESCAPED_STATE, (a2)
0007BA7A                           806  StillHaveBaitLeft
0007BA7A                           807      
0007BA7A                           808      * Remove bait from rod
0007BA7A  137C 0000 0003           809      move.b #0, GET_IS_WORM_ON_HOOK(a1)
0007BA80                           810  
0007BA80                           811      * Line Zap Sound Effect                          
0007BA80  7049                     812      move.l #PLAY_SOUND_TRAP_CODE, d0
0007BA82  43F9 0007BACE            813      lea LineZap, a1
0007BA88  4E4F                     814      trap #15
0007BA8A                           815  NoBaitOnLine
0007BA8A                           816      
0007BA8A  4E75                     817      rts
0007BA8C                           818      
0007BA8C                           819      
0007BA8C                           820  HandleMulletCollision
0007BA8C                           821      * Set isFish flag if there is not already a fish on the line
0007BA8C  45F9 00610284            822      lea FishingManagerTable, a2
0007BA92  7000                     823      moveq #0, d0
0007BA94  102A 0001                824      move.b GET_IS_FISH_ON_HOOK(a2), d0
0007BA98  6714                     825      beq.s DontCatchMullet
0007BA9A                           826      
0007BA9A                           827      * Play Reel in sound
0007BA9A  7049                     828      move.l #PLAY_SOUND_TRAP_CODE, d0
0007BA9C  43F9 0007BAEA            829      lea ReelInSound, a1
0007BAA2  4E4F                     830      trap #15
0007BAA4                           831      
0007BAA4                           832      * Change Game State to MULLET_CAUGHT_STATE
0007BAA4  45F9 00610288            833      lea GameState, a2
0007BAAA  14BC 0003                834      move.b #MULLET_CAUGHT_STATE, (a2)
0007BAAE                           835  DontCatchMullet
0007BAAE                           836  
0007BAAE  4E75                     837      rts
0007BAB0                           838  
0007BAB0                           839  
0007BAB0= 4173 7365 7473 5...      840  FishFlee dc.w 'Assets\sounds\fish_flee.wav', 0
0007BACE= 4173 7365 7473 5...      841  LineZap dc.w 'Assets\sounds\line_zap.wav', 0
0007BAEA= 4173 7365 7473 5...      842  ReelInSound dc.w 'Assets\sounds\reel_in.wav', 0
0007BB06                           843  
0007BB06                           844  
0007BB06                           845  -------------------- end include --------------------
0007BB06                           846      INCLUDE "7SegmentDisplay.X68"
0007BB06                           847  
0007BB06                           848  USED_REG                            REG D0-D7/A0-A2
0007BB06  =00000008                849  SEVEN_SEGMENT_DRAW_STACK_SIZE       EQU 8
0007BB06                           850  
0007BB06  =0000003A                851  SEVEN_SEGMENT_DISPLAY_X_DRAW        EQU 58
0007BB06  =00000038                852  SEVEN_SEGMENT_DISPLAY_Y_DRAW        EQU 56
0007BB06  =00000036                853  SEVEN_SEGMENT_SIZE_LOCAL_DRAW       EQU 54
0007BB06                           854  
0007BB06  =00000036                855  SEVEN_SEGMENT_DISPLAY_X_LOCAL       EQU 54
0007BB06  =00000034                856  SEVEN_SEGMENT_DISPLAY_Y_LOCAL       EQU 52
0007BB06  =00000032                857  SEVEN_SEGMENT_SIZE_LOCAL            EQU 50
0007BB06  =00000030                858  SEVEN_SEGMENT_NUMBER_LOCAL          EQU 48
0007BB06                           859  
0007BB06  =00000001                860  SEVEN_SEGMENT_PEN_WIDTH             EQU 1
0007BB06  =00000007                861  NUMBER_OF_SEGMENTS                  EQU 7
0007BB06  =00000004                862  BITMASK_TABLE_ENTRY_SIZE            EQU 4
0007BB06                           863  
0007BB06                           864  DrawNumber
0007BB06  48E7 FFE0                865      movem.l USED_REG, -(sp)
0007BB0A                           866  
0007BB0A  41F9 0007BC6A            867      lea SEVEN_SEGMENT_BITMASK_TABLE, a0
0007BB10  43F9 0007BC74            868      lea SEVEN_SEGMENT_FUNCTION_TABLE, a1
0007BB16  3A2F 0030                869      move.w SEVEN_SEGMENT_NUMBER_LOCAL(sp), d5           ; number to display (0-9)
0007BB1A  1A30 5000                870      move.b (a0, d5), d5
0007BB1E  7C06                     871      move.l #(NUMBER_OF_SEGMENTS-1), d6                  ; Loop for each segment (adjust for dbra)
0007BB20                           872      
0007BB20                           873      * Set Pen Color
0007BB20  7050                     874      move.l #PEN_COLOR_TRAP_CODE, d0
0007BB22  223C 0098E5FE            875      move.l #COOLER_COLOR, d1
0007BB28  4E4F                     876      trap #15
0007BB2A                           877      
0007BB2A                           878      * Set Fill Color
0007BB2A  7051                     879      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0007BB2C  223C 0098E5FE            880      move.l #COOLER_COLOR, d1
0007BB32  4E4F                     881      trap #15
0007BB34                           882      
0007BB34                           883      * Fill previous display so new one can be drawn
0007BB34  302F 0032                884      move.w SEVEN_SEGMENT_SIZE_LOCAL(sp), d0
0007BB38  322F 0036                885      move.w SEVEN_SEGMENT_DISPLAY_X_LOCAL(sp), d1
0007BB3C  3601                     886      move.w d1, d3
0007BB3E  342F 0034                887      move.w SEVEN_SEGMENT_DISPLAY_Y_LOCAL(sp), d2
0007BB42  3802                     888      move.w d2, d4
0007BB44  9440                     889      sub.w d0, d2
0007BB46  D840                     890      add.w d0, d4
0007BB48  E248                     891      lsr.w #1, d0
0007BB4A  9240                     892      sub.w d0, d1
0007BB4C  D640                     893      add.w d0, d3
0007BB4E  0442 0001                894      subi.w #(COOLER_SEGMENT_WIDTH/2), d2
0007BB52  0644 0001                895      addi.w #(COOLER_SEGMENT_WIDTH/2), d4
0007BB56  0644 0002                896      addi.w #COOLER_SLANT_OFFSET, d4
0007BB5A  0441 0001                897      subi.w #(COOLER_SEGMENT_WIDTH/2), d1
0007BB5E  0643 0001                898      addi.w #(COOLER_SEGMENT_WIDTH/2), d3
0007BB62  7057                     899      move.l #DRAW_RECT_TRAP_CODE, d0
0007BB64  4E4F                     900      trap #15
0007BB66                           901      
0007BB66                           902      * Set Pen Color
0007BB66  7050                     903      move.l #PEN_COLOR_TRAP_CODE, d0
0007BB68  223C 00405D67            904      move.l #COOLER_TEXT_COLOR, d1
0007BB6E  4E4F                     905      trap #15
0007BB70                           906      
0007BB70                           907      * Set Pen Width
0007BB70  705D                     908      move.l #PEN_WIDTH_TRAP_CODE, d0
0007BB72  223C 00000003            909      move.l #COOLER_SEGMENT_WIDTH, d1
0007BB78  4E4F                     910      trap #15
0007BB7A                           911      
0007BB7A                           912  CheckBits
0007BB7A  0805 0000                913      btst #0, d5
0007BB7E  6706                     914      beq.s DoNotDrawSegment
0007BB80  2451                     915      move.l (a1), a2
0007BB82  7054                     916      move.l #DRAW_LINE_TRAP_CODE, d0
0007BB84  4E92                     917      jsr (a2)
0007BB86                           918  DoNotDrawSegment
0007BB86  E24D                     919      lsr.w #1, d5
0007BB88  43E9 0004                920      lea BITMASK_TABLE_ENTRY_SIZE(a1), a1
0007BB8C  51CE FFEC                921      dbra d6, CheckBits
0007BB90  4CDF 07FF                922      movem.l (sp)+, USED_REG
0007BB94                           923      
0007BB94                           924      * Set Pen Width
0007BB94  705D                     925      move.l #PEN_WIDTH_TRAP_CODE, d0
0007BB96  7201                     926      move.l #SEVEN_SEGMENT_PEN_WIDTH, d1
0007BB98  4E4F                     927      trap #15
0007BB9A                           928      
0007BB9A  4E75                     929      rts
0007BB9C                           930      
0007BB9C                           931  DrawA
0007BB9C  322F 003A                932      move.w SEVEN_SEGMENT_DISPLAY_X_DRAW(sp), d1
0007BBA0  342F 0038                933      move.w SEVEN_SEGMENT_DISPLAY_Y_DRAW(sp), d2
0007BBA4  3E2F 0036                934      move.w SEVEN_SEGMENT_SIZE_LOCAL_DRAW(sp), d7
0007BBA8  3601                     935      move.w d1, d3
0007BBAA  9447                     936      sub.w d7, d2
0007BBAC  3802                     937      move.w d2, d4
0007BBAE  0642 0002                938      addi.w #COOLER_SLANT_OFFSET, d2
0007BBB2  E24F                     939      lsr.w #1, d7
0007BBB4  D647                     940      add.w d7, d3
0007BBB6  9247                     941      sub.w d7, d1
0007BBB8  4E4F                     942      trap #15
0007BBBA  4E75                     943      rts
0007BBBC                           944      
0007BBBC                           945      
0007BBBC                           946  DrawB
0007BBBC  322F 003A                947      move.w SEVEN_SEGMENT_DISPLAY_X_DRAW(sp), d1
0007BBC0  342F 0038                948      move.w SEVEN_SEGMENT_DISPLAY_Y_DRAW(sp), d2
0007BBC4  3E2F 0036                949      move.w SEVEN_SEGMENT_SIZE_LOCAL_DRAW(sp), d7
0007BBC8  3802                     950      move.w d2, d4
0007BBCA  9447                     951      sub.w d7, d2
0007BBCC  E24F                     952      lsr.w #1, d7
0007BBCE  D247                     953      add.w d7, d1
0007BBD0  3601                     954      move.w d1, d3
0007BBD2  4E4F                     955      trap #15
0007BBD4  4E75                     956      rts
0007BBD6                           957   
0007BBD6                           958   
0007BBD6                           959  DrawC
0007BBD6  322F 003A                960      move.w SEVEN_SEGMENT_DISPLAY_X_DRAW(sp), d1
0007BBDA  342F 0038                961      move.w SEVEN_SEGMENT_DISPLAY_Y_DRAW(sp), d2
0007BBDE  3E2F 0036                962      move.w SEVEN_SEGMENT_SIZE_LOCAL_DRAW(sp), d7
0007BBE2  3802                     963      move.w d2, d4
0007BBE4  D447                     964      add.w d7, d2
0007BBE6  E24F                     965      lsr.w #1, d7
0007BBE8  D247                     966      add.w d7, d1
0007BBEA  3601                     967      move.w d1, d3
0007BBEC  4E4F                     968      trap #15
0007BBEE  4E75                     969      rts
0007BBF0                           970      
0007BBF0                           971      
0007BBF0                           972  DrawD
0007BBF0  322F 003A                973      move.w SEVEN_SEGMENT_DISPLAY_X_DRAW(sp), d1
0007BBF4  342F 0038                974      move.w SEVEN_SEGMENT_DISPLAY_Y_DRAW(sp), d2
0007BBF8  3E2F 0036                975      move.w SEVEN_SEGMENT_SIZE_LOCAL_DRAW(sp), d7
0007BBFC  3601                     976      move.w d1, d3
0007BBFE  D447                     977      add.w d7, d2
0007BC00  3802                     978      move.w d2, d4
0007BC02  0642 0002                979      addi.w #COOLER_SLANT_OFFSET, d2
0007BC06  E24F                     980      lsr.w #1, d7
0007BC08  D647                     981      add.w d7, d3
0007BC0A  9247                     982      sub.w d7, d1
0007BC0C  4E4F                     983      trap #15
0007BC0E  4E75                     984      rts   
0007BC10                           985      
0007BC10                           986      
0007BC10                           987  DrawE
0007BC10  322F 003A                988      move.w SEVEN_SEGMENT_DISPLAY_X_DRAW(sp), d1
0007BC14  342F 0038                989      move.w SEVEN_SEGMENT_DISPLAY_Y_DRAW(sp), d2
0007BC18  0642 0002                990      addi.w #COOLER_SLANT_OFFSET, d2
0007BC1C  3E2F 0036                991      move.w SEVEN_SEGMENT_SIZE_LOCAL_DRAW(sp), d7
0007BC20  3802                     992      move.w d2, d4
0007BC22  D447                     993      add.w d7, d2
0007BC24  E24F                     994      lsr.w #1, d7
0007BC26  9247                     995      sub.w d7, d1
0007BC28  3601                     996      move.w d1, d3
0007BC2A  4E4F                     997      trap #15
0007BC2C  4E75                     998      rts     
0007BC2E                           999      
0007BC2E                          1000      
0007BC2E                          1001  DrawF
0007BC2E  322F 003A               1002      move.w SEVEN_SEGMENT_DISPLAY_X_DRAW(sp), d1
0007BC32  342F 0038               1003      move.w SEVEN_SEGMENT_DISPLAY_Y_DRAW(sp), d2
0007BC36  0642 0002               1004      addi.w #COOLER_SLANT_OFFSET, d2
0007BC3A  3E2F 0036               1005      move.w SEVEN_SEGMENT_SIZE_LOCAL_DRAW(sp), d7
0007BC3E  3802                    1006      move.w d2, d4
0007BC40  9447                    1007      sub.w d7, d2
0007BC42  E24F                    1008      lsr.w #1, d7
0007BC44  9247                    1009      sub.w d7, d1
0007BC46  3601                    1010      move.w d1, d3
0007BC48  4E4F                    1011      trap #15
0007BC4A  4E75                    1012      rts
0007BC4C                          1013      
0007BC4C                          1014      
0007BC4C                          1015  DrawG
0007BC4C  322F 003A               1016      move.w SEVEN_SEGMENT_DISPLAY_X_DRAW(sp), d1
0007BC50  342F 0038               1017      move.w SEVEN_SEGMENT_DISPLAY_Y_DRAW(sp), d2
0007BC54  3E2F 0036               1018      move.w SEVEN_SEGMENT_SIZE_LOCAL_DRAW(sp), d7
0007BC58  3601                    1019      move.w d1, d3
0007BC5A  3802                    1020      move.w d2, d4
0007BC5C  0642 0002               1021      addi.w #COOLER_SLANT_OFFSET, d2
0007BC60  E24F                    1022      lsr.w #1, d7
0007BC62  D647                    1023      add.w d7, d3
0007BC64  9247                    1024      sub.w d7, d1
0007BC66  4E4F                    1025      trap #15
0007BC68  4E75                    1026      rts
0007BC6A                          1027          
0007BC6A                          1028  
0007BC6A= 7E 30 6D 79 33 5B ...   1029  SEVEN_SEGMENT_BITMASK_TABLE dc.b $7E, $30, $6D, $79, $33, $5B, $5F, $70, $7F, $7B
0007BC74= 0007BC4C 0007BC2E ...   1030  SEVEN_SEGMENT_FUNCTION_TABLE dc.l DrawG, DrawF, DrawE, DrawD, DrawC, DrawB, DrawA
0007BC90                          1031  
0007BC90                          1032  
0007BC90                          1033  -------------------- end include --------------------
0007BC90                          1034      INCLUDE "DoneSpawningCheck.X68"
0007BC90                          1035  
0007BC90                          1036  DoneSpawningCheck
0007BC90  43F9 00610260           1037      lea GameObjectTable, a1
0007BC96  7605                    1038      move.l #(MAX_GAME_OBJECTS-1), d3
0007BC98                          1039      
0007BC98                          1040  CheckIfAllGameObjectAreInvisible
0007BC98  1029 0004               1041      move.b GET_TYPE(a1), d0
0007BC9C  5C89                    1042      add.l #GAME_OBJECT_TABLE_ENTRY_SIZE, a1
0007BC9E  0C00 0003               1043      cmpi.b #INVISIBLE_TYPE, d0
0007BCA2  660E                    1044      bne.s StillVisibleGameObjects
0007BCA4  51CB FFF2               1045      dbra d3, CheckIfAllGameObjectAreInvisible
0007BCA8                          1046      
0007BCA8                          1047      * Change game state to start Mullet Sequence
0007BCA8  43F9 00610288           1048      lea GameState, a1
0007BCAE  12BC 0001               1049      move.b #DO_MULLET_SETUP_STATE, (a1)
0007BCB2                          1050      
0007BCB2                          1051  StillVisibleGameObjects
0007BCB2                          1052      
0007BCB2  4E75                    1053      rts
0007BCB4                          1054  
0007BCB4                          1055  
0007BCB4                          1056  -------------------- end include --------------------
0007BCB4                          1057      INCLUDE "LeaderboardManagement.X68"
0007BCB4                          1058  
0007BCB4  =00000008               1059  BackspaceASCIIValue             EQU 8
0007BCB4  =00000028               1060  LeaderboardDataSize             EQU 40
0007BCB4  =FFFFFFFF               1061  FileNotFoundID                  EQU $FFFFFFFF
0007BCB4                          1062  
0007BCB4  =00000021               1063  MIN_PRINATBLE_CHARACTER         EQU 33
0007BCB4  =0000007E               1064  MAX_PRINATBLE_CHARACTER         EQU 126
0007BCB4                          1065  
0007BCB4  =00000803               1066  NAME_PROMPT_CURSOR_POSITION_1   EQU $0803
0007BCB4  =00000903               1067  NAME_PROMPT_CURSOR_POSITION_2   EQU $0903
0007BCB4  =00000A03               1068  NAME_PROMPT_CURSOR_POSITION_3   EQU $0A03
0007BCB4                          1069  
0007BCB4  =00000000               1070  NAME_CHARCTER_OFFSET            EQU 0
0007BCB4  =00000009               1071  HIGHSCORE_CHARCTER_OFFSET       EQU 9
0007BCB4                          1072  
0007BCB4  =00000210               1073  LEADERBOARD_ENTRY_X             EQU 528
0007BCB4  =000000A5               1074  LEADERBOARD_ENTRY_Y             EQU 165
0007BCB4  =0000001E               1075  LEADERBOARD_ENTRY_LINE_SPACE    EQU 30
0007BCB4                          1076  
0007BCB4  =000000BE               1077  LEADERBOARD_WIDTH               EQU 190
0007BCB4  =0000018E               1078  LEADERBOARD_HEIGHT              EQU 398
0007BCB4  =00000253               1079  LEADERBOARD_X                   EQU 595
0007BCB4                          1080  
0007BCB4  =00000033               1081  OPEN_EXISTING_FILE_TRAP_CODE    EQU 51
0007BCB4  =00000034               1082  OPEN_NEW_FILE_TRAP_CODE         EQU 52
0007BCB4  =00000035               1083  READ_FILE_TRAP_CODE             EQU 53
0007BCB4  =00000036               1084  WRITE_FILE_TRAP_CODE            EQU 54
0007BCB4  =00000038               1085  CLOSE_FILE_TRAP_CODE            EQU 56
0007BCB4                          1086  
0007BCB4  =000000C8               1087  PRESS_TO_DELETE_X               EQU 200
0007BCB4  =00000208               1088  PRESS_TO_DELETE_Y               EQU 520
0007BCB4  =00000168               1089  PRESS_TO_DELETE_WIDTH           EQU 360
0007BCB4  =00000018               1090  PRESS_TO_DELETE_HEIGHT          EQU 24
0007BCB4                          1091  
0007BCB4                          1092  
0007BCB4                          1093  SaveFileInitialization
0007BCB4                          1094      * Try opening existing save file
0007BCB4  7033                    1095      move.l #OPEN_EXISTING_FILE_TRAP_CODE, d0
0007BCB6  43F9 00159960           1096      lea LeaderboardFilePath, a1
0007BCBC  4E4F                    1097      trap #15
0007BCBE  0C81 FFFFFFFF           1098      cmpi.l #FileNotFoundID, d1
0007BCC4  663E                    1099      bne.s FileExists
0007BCC6                          1100      
0007BCC6                          1101      * Load Blank Leaderboard
0007BCC6  7033                    1102      move.l #OPEN_EXISTING_FILE_TRAP_CODE, d0
0007BCC8  43F9 00159979           1103      lea BlankLeaderboardFilePath, a1
0007BCCE  4E4F                    1104      trap #15
0007BCD0                          1105      
0007BCD0                          1106      * Read from Blank Leaderboard
0007BCD0  7035                    1107      move.l #READ_FILE_TRAP_CODE, d0
0007BCD2  43F9 00159938           1108      lea LEADERBOARD_DATA, a1
0007BCD8  7428                    1109      move.l #LeaderboardDataSize, d2
0007BCDA  4E4F                    1110      trap #15
0007BCDC                          1111      
0007BCDC                          1112      * Close file to confirm write
0007BCDC  7038                    1113      move.l #CLOSE_FILE_TRAP_CODE, d0
0007BCDE  4E4F                    1114      trap #15
0007BCE0                          1115      
0007BCE0                          1116      * Create new leaderboard file
0007BCE0  7034                    1117      move.l #OPEN_NEW_FILE_TRAP_CODE, d0
0007BCE2  43F9 00159960           1118      lea LeaderboardFilePath, a1
0007BCE8  4E4F                    1119      trap #15
0007BCEA                          1120      
0007BCEA                          1121      * Write to new leaderboard file
0007BCEA  7036                    1122      move.l #WRITE_FILE_TRAP_CODE, d0
0007BCEC  43F9 00159938           1123      lea LEADERBOARD_DATA, a1
0007BCF2  7428                    1124      move.l #LeaderboardDataSize, d2
0007BCF4  4E4F                    1125      trap #15
0007BCF6                          1126      
0007BCF6                          1127      * Close file to confirm write
0007BCF6  7038                    1128      move.l #CLOSE_FILE_TRAP_CODE, d0
0007BCF8  4E4F                    1129      trap #15
0007BCFA                          1130      
0007BCFA                          1131      * Open file we just created
0007BCFA  7033                    1132      move.l #OPEN_EXISTING_FILE_TRAP_CODE, d0
0007BCFC  43F9 00159960           1133      lea LeaderboardFilePath, a1
0007BD02  4E4F                    1134      trap #15
0007BD04                          1135  
0007BD04                          1136  FileExists
0007BD04                          1137      
0007BD04                          1138      * Read from Leaderboard file
0007BD04  7035                    1139      move.l #READ_FILE_TRAP_CODE, d0
0007BD06  43F9 00159938           1140      lea LEADERBOARD_DATA, a1
0007BD0C  7428                    1141      move.l #LeaderboardDataSize, d2
0007BD0E  4E4F                    1142      trap #15
0007BD10                          1143      
0007BD10                          1144      * Close file
0007BD10  7038                    1145      move.l #CLOSE_FILE_TRAP_CODE, d0
0007BD12  4E4F                    1146      trap #15
0007BD14                          1147      
0007BD14  4E75                    1148      rts
0007BD16                          1149  
0007BD16                          1150  
0007BD16                          1151  DeleteSaveData
0007BD16                          1152      * Poll for Delete Key
0007BD16  7013                    1153      move.l #GET_KEY_STATE_TRAP_CODE, d0
0007BD18  7208                    1154      move.l #BackspaceASCIIValue, d1
0007BD1A  4E4F                    1155      trap #15
0007BD1C                          1156      
0007BD1C  0801 0000               1157      btst.l #0, d1                           ; test for Backspace pressed
0007BD20  6764                    1158      beq.s BackspaceNotPressed
0007BD22                          1159      
0007BD22                          1160      * Set Fill Color to Water Color
0007BD22  7051                    1161      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0007BD24  223C 00D28049           1162      move.l #WATER_COLOR, d1
0007BD2A  4E4F                    1163      trap #15
0007BD2C                          1164      
0007BD2C                          1165      * Set Pen Color to Water Color
0007BD2C  7050                    1166      move.l #PEN_COLOR_TRAP_CODE, d0
0007BD2E  223C 00D28049           1167      move.l #WATER_COLOR, d1
0007BD34  4E4F                    1168      trap #15
0007BD36                          1169      
0007BD36                          1170      * Fill Click to start message with water
0007BD36  7057                    1171      move.l #DRAW_RECT_TRAP_CODE, d0
0007BD38  323C 00C8               1172      move.w #PRESS_TO_DELETE_X, d1
0007BD3C  343C 0208               1173      move.w #PRESS_TO_DELETE_Y, d2
0007BD40  3601                    1174      move.w d1, d3
0007BD42  3802                    1175      move.w d2, d4
0007BD44  0643 0168               1176      add.w #PRESS_TO_DELETE_WIDTH, d3
0007BD48  0644 0018               1177      add.w #PRESS_TO_DELETE_HEIGHT, d4
0007BD4C  4E4F                    1178      trap #15
0007BD4E                          1179      
0007BD4E                          1180      * Repaint from double buffer
0007BD4E  705E                    1181      move.l #REPAINT_SCREEN_TRAP_CODE, d0
0007BD50  4E4F                    1182      trap #15
0007BD52                          1183  
0007BD52                          1184      * Load Blank Leaderboard
0007BD52  7033                    1185      move.l #OPEN_EXISTING_FILE_TRAP_CODE, d0
0007BD54  43F9 00159979           1186      lea BlankLeaderboardFilePath, a1
0007BD5A  4E4F                    1187      trap #15
0007BD5C                          1188      
0007BD5C                          1189      * Read from Blank Leaderboard
0007BD5C  7035                    1190      move.l #READ_FILE_TRAP_CODE, d0
0007BD5E  43F9 00159938           1191      lea LEADERBOARD_DATA, a1
0007BD64  7428                    1192      move.l #LeaderboardDataSize, d2
0007BD66  4E4F                    1193      trap #15
0007BD68                          1194      
0007BD68                          1195      * Close file to confirm write
0007BD68  7038                    1196      move.l #CLOSE_FILE_TRAP_CODE, d0
0007BD6A  4E4F                    1197      trap #15
0007BD6C                          1198      
0007BD6C                          1199      * Open leaderboard file
0007BD6C  7033                    1200      move.l #OPEN_EXISTING_FILE_TRAP_CODE, d0
0007BD6E  43F9 00159960           1201      lea LeaderboardFilePath, a1
0007BD74  4E4F                    1202      trap #15
0007BD76                          1203      
0007BD76                          1204      * Write to leaderboard file
0007BD76  7036                    1205      move.l #WRITE_FILE_TRAP_CODE, d0
0007BD78  43F9 00159938           1206      lea LEADERBOARD_DATA, a1
0007BD7E  7428                    1207      move.l #LeaderboardDataSize, d2
0007BD80  4E4F                    1208      trap #15
0007BD82                          1209      
0007BD82                          1210      * Close file to confirm write
0007BD82  7038                    1211      move.l #CLOSE_FILE_TRAP_CODE, d0
0007BD84  4E4F                    1212      trap #15
0007BD86                          1213      
0007BD86                          1214  BackspaceNotPressed
0007BD86                          1215      
0007BD86  4E75                    1216      rts
0007BD88                          1217      
0007BD88                          1218  
0007BD88                          1219  GetPlayerName
0007BD88                          1220      * Clear Screen
0007BD88  700B                    1221      move.l #CLEAR_SCREEN_TRAP_CODE, d0
0007BD8A  323C FF00               1222      move.w #CLEAR_SCREEN_MODE, d1                
0007BD8E  4E4F                    1223      trap #15
0007BD90                          1224      
0007BD90                          1225      * Set Fill Color to Black
0007BD90  7051                    1226      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0007BD92  7200                    1227      move.l #BLACK, d1
0007BD94  4E4F                    1228      trap #15
0007BD96                          1229      
0007BD96                          1230      * Loading Icon
0007BD96  705F                    1231      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
0007BD98  43F9 0060F83E           1232      lea LoadingText, a1
0007BD9E  323C 0299               1233      move.w #LOADING_X, d1
0007BDA2  343C 023F               1234      move.w #LOADING_Y, d2                 
0007BDA6  4E4F                    1235      trap #15
0007BDA8                          1236      
0007BDA8                          1237      * Repaint from double buffer
0007BDA8  705E                    1238      move.l #REPAINT_SCREEN_TRAP_CODE, d0
0007BDAA  4E4F                    1239      trap #15
0007BDAC                          1240      
0007BDAC                          1241      * Clear Screen
0007BDAC  700B                    1242      move.l #CLEAR_SCREEN_TRAP_CODE, d0
0007BDAE  323C FF00               1243      move.w #CLEAR_SCREEN_MODE, d1                
0007BDB2  4E4F                    1244      trap #15
0007BDB4                          1245      
0007BDB4                          1246      * Draw Name Prompt
0007BDB4  45F9 000C5D8E           1247      lea NAME_PROMPT_BITMAP, a2
0007BDBA  2F3C 0000008A           1248      move.l #PA_OFFSET, -(sp)                                            ; Bitmap Offset
0007BDC0  2F3C 0000017C           1249      move.l #END_BANNER_WIDTH, -(sp)                                     ; Bitmap Width
0007BDC6  2F3C 0000018E           1250      move.l #END_BANNER_HEIGHT, -(sp)                                    ; Bitmap Height
0007BDCC  2F0A                    1251      move.l a2, -(sp)                                                    ; Bitmap Signature
0007BDCE  2F3C 00000000           1252      move.l #0, -(sp)                                                    ; Bitmap Chunk X
0007BDD4  2F3C 00000000           1253      move.l #0, -(sp)                                                    ; Bitmap Chunk Y
0007BDDA  2F3C 0000017C           1254      move.l #END_BANNER_WIDTH, -(sp)                                     ; Bitmap Chunk Width
0007BDE0  2F3C 0000018E           1255      move.l #END_BANNER_HEIGHT, -(sp)                                    ; Bitmap Chunk Height
0007BDE6  2F3C 000000BE           1256      move.l #((OUTPUT_WINDOW_WIDTH/2)-(END_BANNER_WIDTH/2)), -(sp)       ; Output Screen X
0007BDEC  2F3C 00000065           1257      move.l #((OUTPUT_WINDOW_HEIGHT/2)-(END_BANNER_HEIGHT/2)), -(sp)     ; Output Screen Y
0007BDF2  4EB9 0007B844           1258      jsr DisplayBitmapChunk
0007BDF8  DFFC 00000028           1259      add.l #BM_CHUNKER_STACK_SIZE, sp
0007BDFE                          1260  
0007BDFE                          1261      * Repaint from double buffer
0007BDFE  705E                    1262      move.l #REPAINT_SCREEN_TRAP_CODE, d0
0007BE00  4E4F                    1263      trap #15 
0007BE02                          1264      
0007BE02                          1265      * Set Fill Color to White
0007BE02  7051                    1266      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0007BE04  223C 00FFFFFF           1267      move.l #WHITE, d1
0007BE0A  4E4F                    1268      trap #15
0007BE0C                          1269      
0007BE0C                          1270      * Set Font
0007BE0C  7015                    1271      move.l #SET_FONT_TRAP_CODE, d0
0007BE0E  7200                    1272      move.l #BLACK, d1
0007BE10  243C 06360001           1273      move.l #NAME_PROMPT_FONT, d2
0007BE16  4E4F                    1274      trap #15
0007BE18                          1275      
0007BE18  41F9 00159998           1276      lea PlayerName, a0                                                  ; load PlayerName memory
0007BE1E                          1277  
0007BE1E                          1278  GetCharacterOne
0007BE1E                          1279      * Set Cursor Position
0007BE1E  700B                    1280      move.l #SET_CURSOR_POSITION_TRAP_CODE, d0
0007BE20  223C 00000803           1281      move.l #NAME_PROMPT_CURSOR_POSITION_1, d1
0007BE26  4E4F                    1282      trap #15
0007BE28                          1283      
0007BE28                          1284      * Get Single ASCII Char and make sure its printable
0007BE28  7005                    1285      move.l #GET_SINGLE_CHAR_TRAP_CODE, d0
0007BE2A  4E4F                    1286      trap #15
0007BE2C  0C01 007E               1287      cmpi.b #MAX_PRINATBLE_CHARACTER, d1
0007BE30  6EEC                    1288      bgt GetCharacterOne
0007BE32  0C01 0021               1289      cmpi.b #MIN_PRINATBLE_CHARACTER, d1
0007BE36  6DE6                    1290      blt GetCharacterOne
0007BE38  10C1                    1291      move.b d1, (a0)+                                                    ; move charachter to PlayerName memory
0007BE3A                          1292      
0007BE3A                          1293  GetCharacterTwo
0007BE3A                          1294      * Set Cursor Position
0007BE3A  700B                    1295      move.l #SET_CURSOR_POSITION_TRAP_CODE, d0
0007BE3C  223C 00000903           1296      move.l #NAME_PROMPT_CURSOR_POSITION_2, d1
0007BE42  4E4F                    1297      trap #15
0007BE44                          1298      
0007BE44                          1299      * Get Single ASCII Char and make sure its printable
0007BE44  7005                    1300      move.l #GET_SINGLE_CHAR_TRAP_CODE, d0
0007BE46  4E4F                    1301      trap #15
0007BE48  0C01 007E               1302      cmpi.b #MAX_PRINATBLE_CHARACTER, d1
0007BE4C  6EEC                    1303      bgt GetCharacterTwo
0007BE4E  0C01 0021               1304      cmpi.b #MIN_PRINATBLE_CHARACTER, d1
0007BE52  6DE6                    1305      blt GetCharacterTwo
0007BE54  10C1                    1306      move.b d1, (a0)+                                                    ; move charachter to PlayerName memory
0007BE56                          1307      
0007BE56                          1308  GetCharacterThree
0007BE56                          1309      * Set Cursor Position
0007BE56  700B                    1310      move.l #SET_CURSOR_POSITION_TRAP_CODE, d0
0007BE58  223C 00000A03           1311      move.l #NAME_PROMPT_CURSOR_POSITION_3, d1
0007BE5E  4E4F                    1312      trap #15
0007BE60                          1313      
0007BE60                          1314      * Get Single ASCII Char and make sure its printable
0007BE60  7005                    1315      move.l #GET_SINGLE_CHAR_TRAP_CODE, d0
0007BE62  4E4F                    1316      trap #15
0007BE64  0C01 007E               1317      cmpi.b #MAX_PRINATBLE_CHARACTER, d1
0007BE68  6EEC                    1318      bgt GetCharacterThree
0007BE6A  0C01 0021               1319      cmpi.b #MIN_PRINATBLE_CHARACTER, d1
0007BE6E  6DE6                    1320      blt GetCharacterThree
0007BE70  10C1                    1321      move.b d1, (a0)+
0007BE72                          1322      
0007BE72  4E75                    1323      rts
0007BE74                          1324      
0007BE74                          1325  AddScoreToLeaderboard   
0007BE74  43F9 00159998           1326      lea PlayerName, a1
0007BE7A  2011                    1327      move.l (a1), d0                             ; d0 = player name
0007BE7C                          1328      
0007BE7C                          1329      * Get Fish Count
0007BE7C  45F9 00610284           1330      lea FishingManagerTable, a2
0007BE82  7800                    1331      moveq #0, d4
0007BE84  182A 0000               1332      move.b GET_NUM_FISH_CAUGHT(a2), d4          ; score = d4
0007BE88                          1333       
0007BE88                          1334      * Add mullet bonus
0007BE88  45F9 00610288           1335      lea GameState, a2
0007BE8E  1612                    1336      move.b (a2), d3
0007BE90  0C03 0003               1337      cmpi.b #MULLET_CAUGHT_STATE, d3
0007BE94  6602                    1338      bne.s SkipMulletScoreAddition
0007BE96  5A84                    1339      addi.l #MULLET_SCORE_BONUS, d4              ; score += mullet bonus
0007BE98                          1340  SkipMulletScoreAddition
0007BE98  1004                    1341      move.b d4, d0                               ; d0 = player name and score
0007BE9A                          1342  
0007BE9A  41F9 00159938           1343      lea LEADERBOARD_DATA, a0
0007BEA0  7E09                    1344      move.l #9, d7
0007BEA2                          1345  InsertScoreLoop
0007BEA2  2210                    1346      move.l (a0), d1
0007BEA4  B001                    1347      cmp.b d1, d0
0007BEA6  6F04                    1348      ble.s SkipSwap                              ; update if current min > current GameObject
0007BEA8                          1349      
0007BEA8                          1350      * Update Min
0007BEA8  2080                    1351      move.l d0, (a0)
0007BEAA  2001                    1352      move.l d1, d0
0007BEAC                          1353  SkipSwap
0007BEAC  5888                    1354      add.l #4, a0                                ; Increment to next GameObject
0007BEAE  51CF FFF2               1355      dbra d7, InsertScoreLoop
0007BEB2                          1356      
0007BEB2                          1357      * Open leaderboard file
0007BEB2  7033                    1358      move.l #OPEN_EXISTING_FILE_TRAP_CODE, d0
0007BEB4  43F9 00159960           1359      lea LeaderboardFilePath, a1
0007BEBA  4E4F                    1360      trap #15
0007BEBC                          1361      
0007BEBC                          1362      * Write updated scores to leaderboard file
0007BEBC  7036                    1363      move.l #WRITE_FILE_TRAP_CODE, d0
0007BEBE  43F9 00159938           1364      lea LEADERBOARD_DATA, a1
0007BEC4  7428                    1365      move.l #LeaderboardDataSize, d2
0007BEC6  4E4F                    1366      trap #15
0007BEC8                          1367      
0007BEC8                          1368      * Close file to confirm write
0007BEC8  7038                    1369      move.l #CLOSE_FILE_TRAP_CODE, d0
0007BECA  4E4F                    1370      trap #15
0007BECC                          1371      
0007BECC  4E75                    1372      rts
0007BECE                          1373      
0007BECE                          1374  DrawLeaderboard
0007BECE                          1375      * Draw Leaderboard
0007BECE  45F9 0007BF74           1376      lea LEADERBOARD_BITMAP, a2
0007BED4  2F3C 0000008A           1377      move.l #PA_OFFSET, -(sp)                                            ; Bitmap Offset
0007BEDA  2F3C 000000BE           1378      move.l #LEADERBOARD_WIDTH, -(sp)                                    ; Bitmap Width
0007BEE0  2F3C 0000018E           1379      move.l #LEADERBOARD_HEIGHT, -(sp)                                   ; Bitmap Height
0007BEE6  2F0A                    1380      move.l a2, -(sp)                                                    ; Bitmap Signature
0007BEE8  2F3C 00000000           1381      move.l #0, -(sp)                                                    ; Bitmap Chunk X
0007BEEE  2F3C 00000000           1382      move.l #0, -(sp)                                                    ; Bitmap Chunk Y
0007BEF4  2F3C 000000BE           1383      move.l #LEADERBOARD_WIDTH, -(sp)                                    ; Bitmap Chunk Width
0007BEFA  2F3C 0000018E           1384      move.l #LEADERBOARD_HEIGHT, -(sp)                                   ; Bitmap Chunk Height
0007BF00  2F3C 000001F4           1385      move.l #(LEADERBOARD_X-(LEADERBOARD_WIDTH/2)), -(sp)                ; Output Screen X
0007BF06  2F3C 00000065           1386      move.l #((OUTPUT_WINDOW_HEIGHT/2)-(LEADERBOARD_HEIGHT/2)), -(sp)    ; Output Screen Y
0007BF0C  4EB9 0007B844           1387      jsr DisplayBitmapChunk
0007BF12  DFFC 00000028           1388      add.l #BM_CHUNKER_STACK_SIZE, sp
0007BF18                          1389      
0007BF18                          1390      * Draw Scores
0007BF18  41F9 00159938           1391      lea LEADERBOARD_DATA, a0
0007BF1E  43F9 0015999C           1392      lea LeaderboardScoreText, a1
0007BF24  7E09                    1393      move.l #9, d7
0007BF26  243C 000000A5           1394      move.l #LEADERBOARD_ENTRY_Y, d2
0007BF2C                          1395      
0007BF2C                          1396  DrawScore
0007BF2C  7800                    1397      moveq #0, d4
0007BF2E  7A00                    1398      moveq #0, d5
0007BF30  2018                    1399      move.l (a0)+, d0                    
0007BF32  1800                    1400      move.b d0, d4                                   ; d4 = score
0007BF34  103C 0020               1401      move.b #SPACE_ASCII_CHAR, d0                    ; d0 = "name "
0007BF38  2340 0000               1402      move.l d0, NAME_CHARCTER_OFFSET(a1)             ; add name to string
0007BF3C                          1403      
0007BF3C                          1404      * Display 0 score if score is -1 (placeholder score)
0007BF3C  1804                    1405      move.b d4, d4                                   ; move byte of d4 to itself to trigger the branch
0007BF3E  6A02                    1406      bpl.s NotPlaceholderScore                       ; skip reset if score is positive
0007BF40  7800                    1407      moveq #0, d4                                    ; set score to 0
0007BF42                          1408  NotPlaceholderScore
0007BF42                          1409      
0007BF42                          1410      * Get Score
0007BF42  88FC 000A               1411      divu #10, d4
0007BF46  3A04                    1412      move.w d4, d5                                   ; d5 = tens place
0007BF48  4844                    1413      swap d4                                         ; d4 = ones place
0007BF4A  0605 0030               1414      addi.b #DEC_TO_ASCII, d5                        ; d5 = tens place (ascii charachter)
0007BF4E  0604 0030               1415      addi.b #DEC_TO_ASCII, d4                        ; d4 = ones place (ascii charachter)
0007BF52  1345 0009               1416      move.b d5, HIGHSCORE_CHARCTER_OFFSET(a1)        ; add tens place to string
0007BF56  1344 000A               1417      move.b d4, (HIGHSCORE_CHARCTER_OFFSET+1)(a1)    ; add ones place to string
0007BF5A                          1418      
0007BF5A                          1419      * Display Line
0007BF5A  705F                    1420      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
0007BF5C  223C 00000210           1421      move.l #LEADERBOARD_ENTRY_X, d1               
0007BF62  4E4F                    1422      trap #15
0007BF64                          1423      
0007BF64  0682 0000001E           1424      addi.l #LEADERBOARD_ENTRY_LINE_SPACE , d2
0007BF6A  51CF FFC0               1425      dbra d7, DrawScore
0007BF6E                          1426      
0007BF6E                          1427      * Repaint from double buffer
0007BF6E  705E                    1428      move.l #REPAINT_SCREEN_TRAP_CODE, d0
0007BF70  4E4F                    1429      trap #15
0007BF72                          1430      
0007BF72  4E75                    1431      rts
0007BF74                          1432  
0007BF74                          1433  
0007BF74                          1434  LEADERBOARD_BITMAP  
0007BF74                          1435      INCBIN "Assets\leaderboard_display.bmp"
000C5D8E                          1436  END_LEADERBOARD_BITMAP
000C5D8E                          1437  
000C5D8E                          1438  NAME_PROMPT_BITMAP
000C5D8E                          1439      INCBIN "Assets\name_prompt.bmp"
00159938                          1440  END_NAME_PROMPT_BITMAP
00159938                          1441  
00159938                          1442  LEADERBOARD_DATA ds.l 10
00159960= 53 61 76 65 44 61 ...   1443  LeaderboardFilePath dc.b 'SaveData\leaderboard.bin', 0
00159979= 53 61 76 65 44 61 ...   1444  BlankLeaderboardFilePath dc.b 'SaveData\blank_leaderboard.bin', 0
00159998                          1445  PlayerName ds.l 1
0015999C= 2D2D 2D20 2020 2...     1446  LeaderboardScoreText dc.w '---      00', 0
001599AA                          1447  
001599AA                          1448  
001599AA                          1449  -------------------- end include --------------------
001599AA                          1450      INCLUDE "GameOverLoading.X68"
001599AA                          1451  
001599AA  =0000000C               1452  FISHSCORE_CHARCTER_OFFSET       EQU 12
001599AA  =00000015               1453  TOTALSCORE_CHARCTER_OFFSET      EQU 21
001599AA                          1454  
001599AA  =00000048               1455  END_BANNER_CONTENT_X            EQU 72
001599AA                          1456  
001599AA  =0000016B               1457  FISHSCORE_Y                     EQU 363
001599AA  =0000018E               1458  MULLETSCORE_Y                   EQU 398
001599AA  =000001B1               1459  TOTALSCORE_Y                    EQU 433
001599AA  =000001D1               1460  RETURN_TO_MENU_TEXT_Y           EQU 465
001599AA  =00000024               1461  SCORE_TEXT_LINE_OFFSET          EQU 36
001599AA  =0000000C               1462  END_BANNER_FONT_WIDTH           EQU 12
001599AA                          1463  
001599AA  =0000000F               1464  PRESS_ESC_TO_EXIT_TEXT_X        EQU 15
001599AA  =0000023F               1465  PRESS_ESC_TO_EXIT_TEXT_Y        EQU 575
001599AA                          1466  
001599AA  =0000017C               1467  END_BANNER_WIDTH                EQU 380
001599AA  =0000018E               1468  END_BANNER_HEIGHT               EQU 398
001599AA  =000000FF               1469  END_BANNER_X                    EQU 255
001599AA                          1470  
001599AA                          1471  GameOverLoading    
001599AA                          1472      * Set Font
001599AA  7015                    1473      move.l #SET_FONT_TRAP_CODE, d0
001599AC  223C 00FFFFFF           1474      move.l #WHITE, d1
001599B2  243C 020A0001           1475      move.l #LOADING_SMALL_FONT, d2
001599B8  4E4F                    1476      trap #15
001599BA                          1477  
001599BA                          1478      * Set Fill Color to Black
001599BA  7051                    1479      move.l #SET_FILL_COLOR_TRAP_CODE, d0
001599BC  7200                    1480      move.l #BLACK, d1
001599BE  4E4F                    1481      trap #15
001599C0                          1482      
001599C0                          1483      * Loading Icon
001599C0  705F                    1484      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
001599C2  43F9 0060F83E           1485      lea LoadingText, a1                                                 ; Variable located in OneTimeGameSetup 
001599C8  323C 0299               1486      move.w #LOADING_X, d1                                               ; Equate located in OneTimeGameSetup 
001599CC  343C 023F               1487      move.w #LOADING_Y, d2                                               ; Equate located in OneTimeGameSetup                 
001599D0  4E4F                    1488      trap #15
001599D2                          1489      
001599D2                          1490      * Repaint from double buffer
001599D2  705E                    1491      move.l #REPAINT_SCREEN_TRAP_CODE, d0
001599D4  4E4F                    1492      trap #15
001599D6                          1493      
001599D6                          1494      * Clear Screen
001599D6  700B                    1495      move.l #CLEAR_SCREEN_TRAP_CODE, d0
001599D8  323C FF00               1496      move.w #CLEAR_SCREEN_MODE, d1                
001599DC  4E4F                    1497      trap #15
001599DE                          1498      
001599DE                          1499      * Draw End Banner
001599DE  45F9 00159B58           1500      lea END_BANNER_BITMAP, a2
001599E4  2F3C 0000008A           1501      move.l #PA_OFFSET, -(sp)                                            ; Bitmap Offset
001599EA  2F3C 0000017C           1502      move.l #END_BANNER_WIDTH, -(sp)                                     ; Bitmap Width
001599F0  2F3C 0000031C           1503      move.l #(END_BANNER_HEIGHT*2), -(sp)                                ; Bitmap Height
001599F6  2F0A                    1504      move.l a2, -(sp)                                                    ; Bitmap Signature
001599F8  2F3C 00000000           1505      move.l #0, -(sp)                                                    ; Bitmap Chunk X
001599FE  7600                    1506      move.l #0, d3
00159A00  45F9 00610288           1507      lea GameState, a2
00159A06  7600                    1508      moveq #0, d3
00159A08  1612                    1509      move.b (a2), d3
00159A0A  5703                    1510      subi.b #MULLET_CAUGHT_STATE, d3                                     ; State 3 becomes an offset of 0, state 4 becomes an offset of 1
00159A0C  C6FC 018E               1511      mulu.w #END_BANNER_HEIGHT, d3
00159A10  2F03                    1512      move.l d3, -(sp)                                                    ; Bitmap Chunk Y
00159A12  2F3C 0000017C           1513      move.l #END_BANNER_WIDTH, -(sp)                                     ; Bitmap Chunk Width
00159A18  2F3C 0000018E           1514      move.l #END_BANNER_HEIGHT, -(sp)                                    ; Bitmap Chunk Height
00159A1E  2F3C 00000041           1515      move.l #(END_BANNER_X-(END_BANNER_WIDTH/2)), -(sp)                  ; Output Screen X
00159A24  2F3C 00000065           1516      move.l #((OUTPUT_WINDOW_HEIGHT/2)-(END_BANNER_HEIGHT/2)), -(sp)     ; Output Screen Y
00159A2A  4EB9 0007B844           1517      jsr DisplayBitmapChunk
00159A30  DFFC 00000028           1518      add.l #BM_CHUNKER_STACK_SIZE, sp
00159A36                          1519      
00159A36                          1520      * Set Font
00159A36  7015                    1521      move.l #SET_FONT_TRAP_CODE, d0
00159A38  7200                    1522      move.l #BLACK, d1
00159A3A  243C 06100000           1523      move.l #END_BANNER_FONT, d2
00159A40  4E4F                    1524      trap #15
00159A42                          1525      
00159A42                          1526      * Set Fill Color to White
00159A42  7051                    1527      move.l #SET_FILL_COLOR_TRAP_CODE, d0
00159A44  223C 00FFFFFF           1528      move.l #WHITE, d1
00159A4A  4E4F                    1529      trap #15
00159A4C                          1530      
00159A4C                          1531      * Get Fish Count
00159A4C  43F9 00610284           1532      lea FishingManagerTable, a1
00159A52  7800                    1533      moveq #0, d4
00159A54  7A00                    1534      moveq #0, d5
00159A56  1829 0000               1535      move.b GET_NUM_FISH_CAUGHT(a1), d4
00159A5A                          1536      
00159A5A                          1537      * Mullet count display
00159A5A  7C0C                    1538      move.l #((SCORE_TEXT_LINE_OFFSET)/3), d6                            ; set offset
00159A5C  43F9 00610288           1539      lea GameState, a1
00159A62  1611                    1540      move.b (a1), d3
00159A64  0C03 0003               1541      cmpi.b #MULLET_CAUGHT_STATE, d3
00159A68  6616                    1542      bne.s SkipMulletScoreDisplay
00159A6A  705F                    1543      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
00159A6C  43F9 0028126C           1544      lea MulletScoreText, a1
00159A72  7248                    1545      move.l #END_BANNER_CONTENT_X, d1
00159A74  243C 0000018E           1546      move.l #MULLETSCORE_Y, d2         
00159A7A  4E4F                    1547      trap #15    
00159A7C  5A84                    1548      addi.l #MULLET_SCORE_BONUS, d4                                      ; add mullet score bonus to total score
00159A7E  7C00                    1549      moveq #0, d6                                                        ; set offset to 0
00159A80                          1550  SkipMulletScoreDisplay
00159A80                          1551      
00159A80                          1552      * Get Total Score
00159A80  88FC 000A               1553      divu #10, d4
00159A84  3A04                    1554      move.w d4, d5                                                       ; d5 = tens place
00159A86  4844                    1555      swap d4                                                             ; d4 = ones place
00159A88  0605 0030               1556      addi.b #DEC_TO_ASCII, d5                                            ; d5 = tens place (ascii charachter)
00159A8C  0604 0030               1557      addi.b #DEC_TO_ASCII, d4                                            ; d4 = ones place (ascii charachter)
00159A90  0C05 0030               1558      cmpi.b #DEC_TO_ASCII, d5
00159A94  6600 0008               1559      bne DontClearTensDigitTotal
00159A98  1A04                    1560      move.b d4, d5                                                       ; display ones digit first if tens digit is 
00159A9A  183C 0020               1561      move.b #SPACE_ASCII_CHAR, d4
00159A9E                          1562  DontClearTensDigitTotal
00159A9E                          1563      
00159A9E                          1564      * Total score display
00159A9E  705F                    1565      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
00159AA0  43F9 00281286           1566      lea TotalScoreText, a1
00159AA6  1345 0015               1567      move.b d5, TOTALSCORE_CHARCTER_OFFSET(a1)
00159AAA  1344 0016               1568      move.b d4, (TOTALSCORE_CHARCTER_OFFSET+1)(a1)
00159AAE  7248                    1569      move.l #END_BANNER_CONTENT_X, d1
00159AB0  243C 000001B1           1570      move.l #TOTALSCORE_Y, d2
00159AB6  9486                    1571      sub.l d6, d2                                                        ; subtract offset to center text     
00159AB8  4E4F                    1572      trap #15
00159ABA                          1573      
00159ABA                          1574      * Get Fish Count
00159ABA  43F9 00610284           1575      lea FishingManagerTable, a1
00159AC0  7800                    1576      moveq #0, d4
00159AC2  7A00                    1577      moveq #0, d5
00159AC4  1829 0000               1578      move.b GET_NUM_FISH_CAUGHT(a1), d4
00159AC8  88FC 000A               1579      divu #10, d4
00159ACC  3A04                    1580      move.w d4, d5                                                       ; d5 = tens place
00159ACE  4844                    1581      swap d4                                                             ; d4 = ones place
00159AD0  0605 0030               1582      addi.b #DEC_TO_ASCII, d5                                            ; d5 = tens place (ascii charachter)
00159AD4  0604 0030               1583      addi.b #DEC_TO_ASCII, d4                                            ; d4 = ones place (ascii charachter)
00159AD8  43F9 00281256           1584      lea TwoDigitFishScoreText, a1
00159ADE  0C05 0030               1585      cmpi.b #DEC_TO_ASCII, d5
00159AE2  660C                    1586      bne.s DontClearTensDigitFish
00159AE4  1A04                    1587      move.b d4, d5
00159AE6  183C 0020               1588      move.b #SPACE_ASCII_CHAR, d4                                        ; display ones digit first if tens digit is 0
00159AEA  43F9 00281240           1589      lea OneDigitFishScoreText, a1                                       ; load OneDigitFishScoreText if the score is only 1 digit
00159AF0                          1590  DontClearTensDigitFish
00159AF0                          1591      
00159AF0                          1592      * Fish count display
00159AF0  705F                    1593      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
00159AF2  1345 000C               1594      move.b d5, FISHSCORE_CHARCTER_OFFSET(a1)
00159AF6  1344 000D               1595      move.b d4, (FISHSCORE_CHARCTER_OFFSET+1)(a1)
00159AFA  7248                    1596      move.l #END_BANNER_CONTENT_X, d1
00159AFC  243C 0000016B           1597      move.l #FISHSCORE_Y, d2  
00159B02  D486                    1598      add.l d6, d2                                                        ; add offset to center text                
00159B04  4E4F                    1599      trap #15
00159B06                          1600      
00159B06                          1601      * Set Font
00159B06  7015                    1602      move.l #SET_FONT_TRAP_CODE, d0
00159B08  223C 00FFFFFF           1603      move.l #WHITE, d1
00159B0E  243C 020A0001           1604      move.l #LOADING_SMALL_FONT, d2
00159B14  4E4F                    1605      trap #15
00159B16                          1606  
00159B16                          1607      * Set Fill Color to Black
00159B16  7051                    1608      move.l #SET_FILL_COLOR_TRAP_CODE, d0
00159B18  7200                    1609      move.l #BLACK, d1
00159B1A  4E4F                    1610      trap #15
00159B1C                          1611      
00159B1C                          1612      * Press escape to exit text
00159B1C  705F                    1613      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
00159B1E  43F9 002812A0           1614      lea PressEscToExitText, a1
00159B24  720F                    1615      move.l #PRESS_ESC_TO_EXIT_TEXT_X, d1
00159B26  243C 0000023F           1616      move.l #PRESS_ESC_TO_EXIT_TEXT_Y, d2               
00159B2C  4E4F                    1617      trap #15
00159B2E                          1618      
00159B2E                          1619      * Set Font
00159B2E  7015                    1620      move.l #SET_FONT_TRAP_CODE, d0
00159B30  7200                    1621      move.l #BLACK, d1
00159B32  243C 06100001           1622      move.l #END_BANNER_FONT_BOLD, d2
00159B38  4E4F                    1623      trap #15
00159B3A                          1624      
00159B3A                          1625      * Set Fill Color to White
00159B3A  7051                    1626      move.l #SET_FILL_COLOR_TRAP_CODE, d0
00159B3C  223C 00FFFFFF           1627      move.l #WHITE, d1
00159B42  4E4F                    1628      trap #15
00159B44                          1629  
00159B44                          1630      * Click to restart text
00159B44  705F                    1631      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
00159B46  43F9 00281222           1632      lea ClickToReturnText, a1
00159B4C  7254                    1633      move.l #(END_BANNER_CONTENT_X+END_BANNER_FONT_WIDTH), d1
00159B4E  243C 000001D1           1634      move.l #RETURN_TO_MENU_TEXT_Y, d2               
00159B54  4E4F                    1635      trap #15
00159B56                          1636        
00159B56  4E75                    1637      rts
00159B58                          1638      
00159B58                          1639  
00159B58                          1640  END_BANNER_BITMAP   
00159B58                          1641      INCBIN "Assets\end_banner.bmp"
00281222                          1642  END_END_BANNER_BITMAP 
00281222                          1643  
00281222= 434C 4943 4B20 5...     1644  ClickToReturnText dc.w 'CLICK TO RETURN TO MAIN MENU', 0
00281240= 2059 6F75 2063 6...     1645  OneDigitFishScoreText dc.w ' You caught 0 fish!', 0
00281256= 2059 6F75 2063 6...     1646  TwoDigitFishScoreText dc.w ' You caught 00 fish!', 0
0028126C= 2059 6F75 2063 6...     1647  MulletScoreText dc.w ' You caught the Mullet!', 0
00281286= 2059 6F75 7220 7...     1648  TotalScoreText dc.w ' Your total score is 00', 0
002812A0= 5052 4553 5320 4...     1649  PressEscToExitText dc.w 'PRESS ESCAPE TO EXIT GAME', 0
002812BC                          1650  
002812BC                          1651  
002812BC                          1652  
002812BC                          1653  
002812BC                          1654  
002812BC                          1655  -------------------- end include --------------------
002812BC                          1656      INCLUDE "PreGameSubroutines.X68"
002812BC                          1657  
002812BC  =0000000F               1658  WORM_COUNT_X                    EQU 15
002812BC  =00000014               1659  WORM_COUNT_Y                    EQU 20
002812BC  =00000049               1660  WORM_COUNT_WIDTH                EQU 73
002812BC  =00000044               1661  WORM_COUNT_HEIGHT               EQU 68
002812BC                          1662  
002812BC  =FFFFFF38               1663  STARTING_LOCATION_1             EQU -200
002812BC  =FFFFFF2E               1664  STARTING_LOCATION_2             EQU -210
002812BC  =FFFFFFBA               1665  STARTING_LOCATION_3             EQU -70
002812BC  =00000064               1666  STARTING_LOCATION_4             EQU 100
002812BC  =00000190               1667  STARTING_LOCATION_5             EQU 400
002812BC  =0000012C               1668  STARTING_LOCATION_6             EQU 300
002812BC                          1669  
002812BC  =0000009B               1670  CLICK_TO_START_X                EQU 155
002812BC  =000001E8               1671  CLICK_TO_START_Y                EQU 488
002812BC  =000001B8               1672  CLICK_TO_START_WIDTH            EQU 440
002812BC  =00000037               1673  CLICK_TO_START_HEIGHT           EQU 55
002812BC                          1674  
002812BC  =00000003               1675  STARTING_BAIT                   EQU 3
002812BC  =00000004               1676  STARTING_FISH_SPAWNED           EQU 4
002812BC                          1677  
002812BC  =00000003               1678  FRAME_DURATION                  EQU 3
002812BC                          1679  
002812BC                          1680  PreGameSetup
002812BC                          1681      * Set Fill Color to Water Color
002812BC  7051                    1682      move.l #SET_FILL_COLOR_TRAP_CODE, d0
002812BE  223C 00D28049           1683      move.l #WATER_COLOR, d1
002812C4  4E4F                    1684      trap #15
002812C6                          1685      
002812C6                          1686      * Set Pen Color to Water Color
002812C6  7050                    1687      move.l #PEN_COLOR_TRAP_CODE, d0
002812C8  223C 00D28049           1688      move.l #WATER_COLOR, d1
002812CE  4E4F                    1689      trap #15
002812D0                          1690      
002812D0                          1691      * Fill Screen with Water Color
002812D0  7057                    1692      move.l #DRAW_RECT_TRAP_CODE, d0
002812D2  323C 009B               1693      move.w #CLICK_TO_START_X, d1
002812D6  343C 01E8               1694      move.w #CLICK_TO_START_Y, d2
002812DA  3601                    1695      move.w d1, d3
002812DC  3802                    1696      move.w d2, d4
002812DE  0643 01B8               1697      add.w #CLICK_TO_START_WIDTH, d3
002812E2  0644 0037               1698      add.w #CLICK_TO_START_HEIGHT, d4
002812E6  4E4F                    1699      trap #15
002812E8                          1700  
002812E8                          1701      * Set Font
002812E8  7015                    1702      move.l #SET_FONT_TRAP_CODE, d0
002812EA  223C 00FFFFFF           1703      move.l #WHITE, d1
002812F0  243C 020A0001           1704      move.l #LOADING_SMALL_FONT, d2
002812F6  4E4F                    1705      trap #15
002812F8                          1706  
002812F8                          1707      * Set Fill Color to Purple
002812F8  7051                    1708      move.l #SET_FILL_COLOR_TRAP_CODE, d0
002812FA  223C 007E5958           1709      move.l #LOADING_PURPLE_COLOR, d1
00281300  4E4F                    1710      trap #15
00281302                          1711      
00281302                          1712      * Loading Icon
00281302  705F                    1713      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
00281304  43F9 0060F83E           1714      lea LoadingText, a1                                             ; Variable located in OneTimeGameSetup 
0028130A  323C 0299               1715      move.w #LOADING_X, d1                                           ; Equate located in OneTimeGameSetup 
0028130E  343C 023F               1716      move.w #LOADING_Y, d2                                           ; Equate located in OneTimeGameSetup                
00281312  4E4F                    1717      trap #15
00281314                          1718      
00281314                          1719      * Repaint from double buffer
00281314  705E                    1720      move.l #REPAINT_SCREEN_TRAP_CODE, d0
00281316  4E4F                    1721      trap #15
00281318                          1722  
00281318                          1723      * Set Fill Color to Water Color
00281318  7051                    1724      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0028131A  223C 00D28049           1725      move.l #WATER_COLOR, d1
00281320  4E4F                    1726      trap #15
00281322                          1727      
00281322                          1728      * Set Pen Color to Water Color
00281322  7050                    1729      move.l #PEN_COLOR_TRAP_CODE, d0
00281324  223C 00D28049           1730      move.l #WATER_COLOR, d1
0028132A  4E4F                    1731      trap #15
0028132C                          1732      
0028132C                          1733      * Fill Screen with Water Color
0028132C  7057                    1734      move.l #DRAW_RECT_TRAP_CODE, d0
0028132E  323C 0000               1735      move.w #0, d1
00281332  343C 0000               1736      move.w #0, d2
00281336  363C 02F8               1737      move.w #OUTPUT_WINDOW_WIDTH, d3
0028133A  383C 0258               1738      move.w #OUTPUT_WINDOW_HEIGHT, d4
0028133E  4E4F                    1739      trap #15
00281340                          1740      
00281340                          1741      * Draw Background Top
00281340  45F9 00281560           1742      lea BG_BITMAP, a2
00281346  2F3C 0000008A           1743      move.l #PA_OFFSET, -(sp)                                        ; Bitmap Offset
0028134C  2F3C 000002F8           1744      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                              ; Bitmap Width
00281352  2F3C 00000258           1745      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                             ; Bitmap Height
00281358  2F0A                    1746      move.l a2, -(sp)                                                ; Bitmap Signature
0028135A  2F3C 00000000           1747      move.l #0, -(sp)                                                ; Bitmap Chunk X
00281360  2F3C 00000000           1748      move.l #0, -(sp)                                                ; Bitmap Chunk Y
00281366  2F3C 000002F8           1749      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                              ; Bitmap Chunk Width
0028136C  2F3C 000000BE           1750      move.l #TOP_OF_WATER, -(sp)                                     ; Bitmap Chunk Height
00281372  2F3C 00000000           1751      move.l #0, -(sp)                                                ; Output Screen X
00281378  2F3C 00000000           1752      move.l #0, -(sp)                                                ; Output Screen Y
0028137E  4EB9 0007B844           1753      jsr DisplayBitmapChunk
00281384  DFFC 00000028           1754      add.l #BM_CHUNKER_STACK_SIZE, sp
0028138A                          1755      
0028138A                          1756      * Draw Background BOTTOM
0028138A  45F9 00281560           1757      lea BG_BITMAP, a2
00281390  2F3C 0000008A           1758      move.l #PA_OFFSET, -(sp)                                        ; Bitmap Offset
00281396  2F3C 000002F8           1759      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                              ; Bitmap Width
0028139C  2F3C 00000258           1760      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                             ; Bitmap Height
002813A2  2F0A                    1761      move.l a2, -(sp)                                                ; Bitmap Signature
002813A4  2F3C 00000000           1762      move.l #0, -(sp)                                                ; Bitmap Chunk X
002813AA  2F3C 000001DE           1763      move.l #BOTTOM_OF_WATER, -(sp)                                  ; Bitmap Chunk Y
002813B0  2F3C 000002F8           1764      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                              ; Bitmap Chunk Width
002813B6  2F3C 0000007A           1765      move.l #(OUTPUT_WINDOW_HEIGHT-BOTTOM_OF_WATER), -(sp)           ; Bitmap Chunk Height
002813BC  2F3C 00000000           1766      move.l #0, -(sp)                                                ; Output Screen X
002813C2  2F3C 000001DE           1767      move.l #BOTTOM_OF_WATER, -(sp)                                  ; Output Screen Y
002813C8  4EB9 0007B844           1768      jsr DisplayBitmapChunk
002813CE  DFFC 00000028           1769      add.l #BM_CHUNKER_STACK_SIZE, sp
002813D4                          1770      
002813D4  4E75                    1771      rts
002813D6                          1772      
002813D6                          1773      
002813D6                          1774  VariableInitialization
002813D6                          1775      
002813D6                          1776      * Reset fishing manager table
002813D6  4DF9 00610284           1777      lea FishingManagerTable, a6 
002813DC  1D7C 0000 0000          1778      move.b #0, GET_NUM_FISH_CAUGHT(a6)
002813E2  1D7C 0000 0001          1779      move.b #0, GET_IS_FISH_ON_HOOK(a6)
002813E8  1D7C 0003 0002          1780      move.b #STARTING_BAIT, GET_NUM_WORMS_LEFT(a6)
002813EE  1D7C 0001 0003          1781      move.b #1, GET_IS_WORM_ON_HOOK(a6)                              ; IS_WORM_ON_HOOK = True
002813F4                          1782      
002813F4                          1783      * Update 7 Segment Display Ones Place
002813F4  43F9 00610284           1784      lea FishingManagerTable, a1
002813FA  3F3C 0121               1785      move.w #COOLER_ONES_X, -(sp)                                    ; display coordinate X         
002813FE  3F3C 006E               1786      move.w #COOLER_ONES_Y, -(sp)                                    ; display coordinate Y
00281402  3F3C 000A               1787      move.w #COOLER_SEGMENT_SIZE, -(sp)                              ; segment size
00281406  7000                    1788      moveq #0, d0
00281408  1029 0000               1789      move.b GET_NUM_FISH_CAUGHT(a1), d0
0028140C  80FC 000A               1790      divu #10, d0
00281410  4840                    1791      swap d0
00281412  3F00                    1792      move.w d0, -(sp)                                                ; number to display (0-9)
00281414  4EB9 0007BB06           1793      jsr DrawNumber
0028141A  508F                    1794      add.l #SEVEN_SEGMENT_DRAW_STACK_SIZE, sp
0028141C                          1795      
0028141C                          1796      * Update 7 Segment Display Tens Place
0028141C  43F9 00610284           1797      lea FishingManagerTable, a1
00281422  3F3C 010E               1798      move.w #COOLER_TENS_X, -(sp)                                    ; display coordinate X         
00281426  3F3C 0073               1799      move.w #COOLER_TENS_Y, -(sp)                                    ; display coordinate Y
0028142A  3F3C 000A               1800      move.w #COOLER_SEGMENT_SIZE, -(sp)                              ; segment size
0028142E  7000                    1801      moveq #0, d0
00281430  1029 0000               1802      move.b GET_NUM_FISH_CAUGHT(a1), d0
00281434  80FC 000A               1803      divu #10, d0
00281438  3F00                    1804      move.w d0, -(sp)                                                ; number to display (0-9)
0028143A  4EB9 0007BB06           1805      jsr DrawNumber
00281440  508F                    1806      add.l #SEVEN_SEGMENT_DRAW_STACK_SIZE, sp
00281442                          1807      
00281442                          1808      * Update worm counter to starting value
00281442  4DF9 00610284           1809      lea FishingManagerTable, a6 
00281448  102E 0002               1810      move.b GET_NUM_WORMS_LEFT(a6), d0
0028144C  45F9 0043EAEA           1811      lea WORM_COUNT_BITMAP, a2
00281452  2F3C 0000008A           1812      move.l #PA_OFFSET, -(sp)                                        ; Bitmap Offset
00281458  2F3C 00000049           1813      move.l #WORM_COUNT_WIDTH, -(sp)                                 ; Bitmap Width
0028145E  2F3C 00000110           1814      move.l #(WORM_COUNT_HEIGHT*4), -(sp)                            ; Bitmap Height
00281464  2F0A                    1815      move.l a2, -(sp)                                                ; Bitmap Signature
00281466  2F3C 00000000           1816      move.l #0, -(sp)                                                ; Bitmap Chunk X
0028146C  C0FC 0044               1817      mulu #WORM_COUNT_HEIGHT, d0
00281470  2F00                    1818      move.l d0, -(sp)                                                ; Bitmap Chunk Y
00281472  2F3C 00000049           1819      move.l #WORM_COUNT_WIDTH, -(sp)                                 ; Bitmap Chunk Width
00281478  2F3C 00000044           1820      move.l #WORM_COUNT_HEIGHT, -(sp)                                ; Bitmap Chunk Height
0028147E  2F3C 0000000F           1821      move.l #WORM_COUNT_X, -(sp)                                     ; Output Screen X
00281484  2F3C 00000014           1822      move.l #WORM_COUNT_Y, -(sp)                                     ; Output Screen Y
0028148A  4EB9 0007B844           1823      jsr DisplayBitmapChunk
00281490  DFFC 00000028           1824      add.l #BM_CHUNKER_STACK_SIZE, sp
00281496                          1825      
00281496                          1826      * Set Current max GameObjects to MAX_GAME_OBJECTS
00281496  41F9 00610293           1827      lea GetCurrentMaxGameObjects, a0
0028149C  10BC 0006               1828      move.b #MAX_GAME_OBJECTS, (a0)
002814A0                          1829      
002814A0                          1830      * Set GameState to main game state
002814A0  41F9 00610288           1831      lea GameState, a0
002814A6  10BC 0000               1832      move.b #0, (a0)                                                 ; GameState = main game loop
002814AA                          1833      
002814AA                          1834      * Reset FleeingFishPhysicsManager table values
002814AA  45F9 0060FD42           1835      lea FleeingFishPhysicsManager, a2  
002814B0  24BC 00002580           1836      move.l #(OUTPUT_WINDOW_HEIGHT<<NUM_FRACTIONAL_BITS), (a2)       ; d5 = y-pos (adjusted for 4 fractional bits)
002814B6  257C 00000000 0004      1837      move.l #0, GET_Y_VELOCITY(a2)                                   ; d6 = velocity
002814BE                          1838      
002814BE                          1839      * Set inital pointer to GameObjectTable 
002814BE  4DF9 00610260           1840      lea GameObjectTable, a6
002814C4                          1841      
002814C4                          1842      * Set inital GameObjectTable loop variable
002814C4  7E02                    1843      move.l #NUM_BONUS_GAME_OBJECTS-1, d7                ; d7 = current number of max GameObjects (adjusted for dbra)
002814C6                          1844      
002814C6                          1845      * Set time Goal to (current time + frame duration)
002814C6  7008                    1846      move.l #GET_TIME_TRAP_CODE, d0
002814C8  4E4F                    1847      trap #15
002814CA  5681                    1848      addi.l #FRAME_DURATION, d1
002814CC  43F9 004521B4           1849      lea TimeGoal, a1
002814D2  2281                    1850      move.l d1, (a1)
002814D4                          1851      
002814D4  4E75                    1852      rts
002814D6                          1853      
002814D6                          1854      
002814D6                          1855  SpawnInitialGameObjects
002814D6                          1856      * Slow jelly moving right in lane 0
002814D6  4DF9 00610260           1857      lea GameObjectTable, a6
002814DC  3CFC FF38               1858      move.w #STARTING_LOCATION_1, (a6)+     
002814E0  1CFC 0005               1859      move.b #SLOW_RIGHT, (a6)+  
002814E4  1CFC 0000               1860      move.b #LANE_0, (a6)+
002814E8  1CFC 0002               1861      move.b #JELLY_TYPE, (a6)+
002814EC  1CFC 0000               1862      move.b #FRAME_0, (a6)+
002814F0                          1863      
002814F0                          1864      * Slow fish moving right in lane 2
002814F0  3CFC FF2E               1865      move.w #STARTING_LOCATION_2, (a6)+     
002814F4  1CFC 0005               1866      move.b #SLOW_RIGHT, (a6)+  
002814F8  1CFC 0002               1867      move.b #LANE_2, (a6)+
002814FC  1CFC 0000               1868      move.b #FISH_TYPE, (a6)+
00281500  1CFC 0000               1869      move.b #FRAME_0, (a6)+
00281504                          1870      
00281504                          1871      * Fast fish moving right in lane 2
00281504  3CFC FFBA               1872      move.w #STARTING_LOCATION_3, (a6)+     
00281508  1CFC 0007               1873      move.b #FAST_RIGHT, (a6)+  
0028150C  1CFC 0002               1874      move.b #LANE_2, (a6)+
00281510  1CFC 0000               1875      move.b #FISH_TYPE, (a6)+
00281514  1CFC 0000               1876      move.b #FRAME_0, (a6)+
00281518                          1877      
00281518                          1878      * Fast fish moving left in lane 1
00281518  3CFC 035C               1879      move.w #(OUTPUT_WINDOW_WIDTH)+STARTING_LOCATION_4, (a6)+     
0028151C  1CFC 00F9               1880      move.b #FAST_LEFT, (a6)+  
00281520  1CFC 0001               1881      move.b #LANE_1, (a6)+
00281524  1CFC 0000               1882      move.b #FISH_TYPE, (a6)+
00281528  1CFC 0000               1883      move.b #FRAME_0, (a6)+
0028152C                          1884      
0028152C                          1885      * Slow boot moving left in lane 3
0028152C  3CFC 0488               1886      move.w #(OUTPUT_WINDOW_WIDTH)+STARTING_LOCATION_5, (a6)+     
00281530  1CFC 00FB               1887      move.b #SLOW_LEFT, (a6)+  
00281534  1CFC 0003               1888      move.b #LANE_3, (a6)+
00281538  1CFC 0001               1889      move.b #BOOT_TYPE, (a6)+
0028153C  1CFC 0000               1890      move.b #FRAME_0, (a6)+
00281540                          1891      
00281540                          1892      * Slow fish moving left in lane 3
00281540  3CFC 0424               1893      move.w #(OUTPUT_WINDOW_WIDTH)+STARTING_LOCATION_6, (a6)+     
00281544  1CFC 00FB               1894      move.b #SLOW_LEFT, (a6)+  
00281548  1CFC 0003               1895      move.b #LANE_3, (a6)+
0028154C  1CFC 0000               1896      move.b #FISH_TYPE, (a6)+
00281550  1CFC 0000               1897      move.b #FRAME_0, (a6)+
00281554                          1898      
00281554                          1899      * Set correct starting fish number
00281554  41F9 00610292           1900      lea NumFishSpawned, a0
0028155A  10BC 0004               1901      move.b #STARTING_FISH_SPAWNED, (a0)
0028155E                          1902      
0028155E  4E75                    1903      rts
00281560                          1904      
00281560                          1905      
00281560                          1906  BG_BITMAP   
00281560                          1907      INCBIN "Assets\bg.bmp"
0043EAEA                          1908  END_BG_BITMAP
0043EAEA                          1909  
0043EAEA                          1910  WORM_COUNT_BITMAP   
0043EAEA                          1911      INCBIN "Assets\worm_counter.bmp"
004521B4                          1912  END_WORM_COUNT_BITMAP
004521B4                          1913  
004521B4                          1914  TimeGoal ds.l 1
004521B8                          1915  
004521B8                          1916  
004521B8                          1917  
004521B8                          1918  
004521B8                          1919  
004521B8                          1920  
004521B8                          1921  
004521B8                          1922  
004521B8                          1923  -------------------- end include --------------------
004521B8                          1924      INCLUDE "TitleScreenSetup.X68"
004521B8                          1925  
004521B8  =00000190               1926  PRESS_ESC_TO_EXIT_TEXT_WIDTH    EQU 400
004521B8  =00000032               1927  PRESS_ESC_TO_EXIT_TEXT_HEIGHT   EQU 50
004521B8                          1928  
004521B8                          1929  TitleScreenSetup
004521B8                          1930      * Set Font
004521B8  7015                    1931      move.l #SET_FONT_TRAP_CODE, d0
004521BA  223C 00FFFFFF           1932      move.l #WHITE, d1
004521C0  243C 020A0001           1933      move.l #LOADING_SMALL_FONT, d2
004521C6  4E4F                    1934      trap #15
004521C8                          1935      
004521C8                          1936      * Set Fill Color to Black
004521C8  7051                    1937      move.l #SET_FILL_COLOR_TRAP_CODE, d0
004521CA  7200                    1938      move.l #BLACK, d1
004521CC  4E4F                    1939      trap #15
004521CE                          1940      
004521CE                          1941      * Set Pen Color to Black
004521CE  7050                    1942      move.l #PEN_COLOR_TRAP_CODE, d0
004521D0  7200                    1943      move.l #BLACK, d1
004521D2  4E4F                    1944      trap #15
004521D4                          1945      
004521D4                          1946      * Fill Bottom left corner with black
004521D4  7057                    1947      move.l #DRAW_RECT_TRAP_CODE, d0
004521D6  323C 0000               1948      move.w #0, d1
004521DA  343C 0226               1949      move.w #(OUTPUT_WINDOW_HEIGHT-PRESS_ESC_TO_EXIT_TEXT_HEIGHT), d2
004521DE  363C 0190               1950      move.w #PRESS_ESC_TO_EXIT_TEXT_WIDTH, d3
004521E2  383C 0258               1951      move.w #OUTPUT_WINDOW_HEIGHT, d4
004521E6  4E4F                    1952      trap #15
004521E8                          1953      
004521E8                          1954      * Loading Icon
004521E8  705F                    1955      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
004521EA  43F9 0060F83E           1956      lea LoadingText, a1
004521F0  323C 0299               1957      move.w #LOADING_X, d1
004521F4  343C 023F               1958      move.w #LOADING_Y, d2                 
004521F8  4E4F                    1959      trap #15
004521FA                          1960      
004521FA                          1961      * Repaint from double buffer
004521FA  705E                    1962      move.l #REPAINT_SCREEN_TRAP_CODE, d0
004521FC  4E4F                    1963      trap #15
004521FE                          1964      
004521FE                          1965      * Clear Screen
004521FE  700B                    1966      move.l #CLEAR_SCREEN_TRAP_CODE, d0
00452200  323C FF00               1967      move.w #CLEAR_SCREEN_MODE, d1                
00452204  4E4F                    1968      trap #15
00452206                          1969      
00452206                          1970      * Draw Title Screen
00452206  45F9 00452256           1971      lea TITLE_BITMAP, a2
0045220C  2F3C 0000008A           1972      move.l #PA_OFFSET, -(sp)                                                ; Bitmap Offset
00452212  2F3C 000002F8           1973      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                                      ; Bitmap Width
00452218  2F3C 00000258           1974      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                                     ; Bitmap Height
0045221E  2F0A                    1975      move.l a2, -(sp)                                                        ; Bitmap Signature
00452220  2F3C 00000000           1976      move.l #0, -(sp)                                                        ; Bitmap Chunk X
00452226  2F3C 00000000           1977      move.l #0, -(sp)                                                        ; Bitmap Chunk Y
0045222C  2F3C 000002F8           1978      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                                      ; Bitmap Chunk Width
00452232  2F3C 00000258           1979      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                                     ; Bitmap Chunk Height
00452238  2F3C 00000000           1980      move.l #0, -(sp)                                                        ; Output Screen X
0045223E  2F3C 00000000           1981      move.l #0, -(sp)                                                        ; Output Screen Y
00452244  4EB9 0007B844           1982      jsr DisplayBitmapChunk
0045224A  DFFC 00000028           1983      add.l #BM_CHUNKER_STACK_SIZE, sp
00452250                          1984      
00452250                          1985      * Repaint from double buffer
00452250  705E                    1986      move.l #REPAINT_SCREEN_TRAP_CODE, d0
00452252  4E4F                    1987      trap #15
00452254                          1988      
00452254  4E75                    1989      rts
00452256                          1990  
00452256                          1991  TITLE_BITMAP    
00452256                          1992      INCBIN "Assets\title_screen.bmp"
0060F7E0                          1993  END_TITLE_BITMAP
0060F7E0                          1994  -------------------- end include --------------------
0060F7E0                          1995      INCLUDE "OneTimeGameSetup.X68"
0060F7E0                          1996  
0060F7E0  =00000001               1997  SOUND_PLAYER_LOOP_MODE          EQU 1
0060F7E0                          1998  
0060F7E0  =00000299               1999  LOADING_X                       EQU 665             ; Also used in PreGameSetup and GameOverLoading
0060F7E0  =0000023F               2000  LOADING_Y                       EQU 575             ; Also used in PreGameSetup and GameOverLoading
0060F7E0                          2001  
0060F7E0                          2002  OneTimeGameSetup
0060F7E0                          2003      * Set Output Size
0060F7E0  7021                    2004      move.l #SET_OUTPUT_RESOLUTION_TRAP_CODE, d0
0060F7E2  323C 02F8               2005      move.w #OUTPUT_WINDOW_WIDTH, d1
0060F7E6  4841                    2006      swap d1
0060F7E8  323C 0258               2007      move.w #OUTPUT_WINDOW_HEIGHT, d1
0060F7EC  4E4F                    2008      trap #15
0060F7EE                          2009      
0060F7EE                          2010      * Load Background music into memory
0060F7EE  704A                    2011      move.l #LOAD_SOUND_TRAP_CODE, d0
0060F7F0  43F9 0060F848           2012      lea BGMusic, a1
0060F7F6  7200                    2013      moveq #0, d1              
0060F7F8  4E4F                    2014      trap #15
0060F7FA                          2015      
0060F7FA                          2016      * Play Background Music on loop
0060F7FA  704D                    2017      move.l #LOOP_SOUND_TRAP_CODE, d0
0060F7FC  43F9 0060F848           2018      lea BGMusic, a1
0060F802  7200                    2019      moveq #0, d1                                    ; Set DirectX player to play sound 0
0060F804  7401                    2020      moveq #SOUND_PLAYER_LOOP_MODE, d2               ; Play sound in loop
0060F806  4E4F                    2021      trap #15
0060F808                          2022      
0060F808                          2023      * Enable double buffering
0060F808  705C                    2024      move.l #DRAW_MODE_TRAP_CODE, d0
0060F80A  123C 0011               2025      move.b #DOUBLE_BUFFERING_MODE_NUMBER, d1
0060F80E  4E4F                    2026      trap #15
0060F810                          2027      
0060F810                          2028      * Set Font
0060F810  7015                    2029      move.l #SET_FONT_TRAP_CODE, d0
0060F812  223C 00FFFFFF           2030      move.l #WHITE, d1
0060F818  243C 020A0001           2031      move.l #LOADING_SMALL_FONT, d2
0060F81E  4E4F                    2032      trap #15
0060F820                          2033      
0060F820                          2034      * Set Fill Color to Black
0060F820  7051                    2035      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0060F822  7200                    2036      move.l #BLACK, d1
0060F824  4E4F                    2037      trap #15
0060F826                          2038      
0060F826                          2039      * Loading Icon
0060F826  705F                    2040      move.l #TEXT_TO_SCREEN_TRAP_CODE, d0
0060F828  43F9 0060F83E           2041      lea LoadingText, a1
0060F82E  323C 0299               2042      move.w #LOADING_X, d1
0060F832  343C 023F               2043      move.w #LOADING_Y, d2                 
0060F836  4E4F                    2044      trap #15
0060F838                          2045      
0060F838                          2046      * Repaint from double buffer
0060F838  705E                    2047      move.l #REPAINT_SCREEN_TRAP_CODE, d0
0060F83A  4E4F                    2048      trap #15
0060F83C                          2049      
0060F83C  4E75                    2050      rts
0060F83E                          2051      
0060F83E= 4C6F 6164 696E 6...     2052  LoadingText dc.w 'Loading', 0                     ; Also used in PreGameSetup and GameOverLoading  
0060F848= 4173 7365 7473 5...     2053  BGMusic dc.w 'Assets\sounds\bg_music.wav', 0
0060F864                          2054  
0060F864                          2055  -------------------- end include --------------------
0060F864                          2056      INCLUDE "MulletSequenceSetup.X68"
0060F864                          2057  
0060F864  =FFFFFFB8               2058  STARTING_LOCATION_7             EQU -FISH_WIDTH
0060F864  =FFFFFF38               2059  STARTING_LOCATION_8             EQU -200
0060F864  =FFFFFE70               2060  STARTING_LOCATION_9             EQU -400
0060F864                          2061  
0060F864                          2062  MulletSequenceSetup
0060F864                          2063      * Set proper number of GameObjects in mullet sequence
0060F864  41F9 00610293           2064      lea GetCurrentMaxGameObjects, a0
0060F86A  10BC 0003               2065      move.b #NUM_BONUS_GAME_OBJECTS, (a0)
0060F86E                          2066      
0060F86E                          2067      * Fish 1
0060F86E  4BF9 00610260           2068      lea GameObjectTable, a5
0060F874  3AFC FFB8               2069      move.w #STARTING_LOCATION_7, (a5)+     
0060F878  1AFC 0007               2070      move.b #FAST_RIGHT, (a5)+  
0060F87C  1AFC 0002               2071      move.b #LANE_2, (a5)+
0060F880  1AFC 0000               2072      move.b #FISH_TYPE, (a5)+
0060F884  1AFC 0000               2073      move.b #FRAME_0, (a5)+
0060F888                          2074      
0060F888                          2075      * Fish 2
0060F888  3AFC FF38               2076      move.w #STARTING_LOCATION_8, (a5)+     
0060F88C  1AFC 0007               2077      move.b #FAST_RIGHT, (a5)+  
0060F890  1AFC 0002               2078      move.b #LANE_2, (a5)+
0060F894  1AFC 0000               2079      move.b #FISH_TYPE, (a5)+
0060F898  1AFC 0000               2080      move.b #FRAME_0, (a5)+
0060F89C                          2081      
0060F89C                          2082      * Mullet
0060F89C  3AFC FE70               2083      move.w #STARTING_LOCATION_9, (a5)+     
0060F8A0  1AFC 0007               2084      move.b #FAST_RIGHT, (a5)+  
0060F8A4  1AFC 0002               2085      move.b #LANE_2, (a5)+
0060F8A8  1AFC 0004               2086      move.b #MULLET_TYPE, (a5)+
0060F8AC  1AFC 0000               2087      move.b #FRAME_0, (a5)+
0060F8B0                          2088      
0060F8B0                          2089      * Set pointer to GameObjectTable 
0060F8B0  4DF9 00610260           2090      lea GameObjectTable, a6
0060F8B6                          2091      
0060F8B6                          2092      * Set GameObjectTable loop variable
0060F8B6  7E02                    2093      move.l #NUM_BONUS_GAME_OBJECTS-1, d7                ; d7 = current number of max GameObjects (adjusted for dbra)
0060F8B8                          2094      
0060F8B8                          2095      * Change game state
0060F8B8  43F9 00610288           2096      lea GameState, a1
0060F8BE  12BC 0002               2097      move.b #MULLET_SEQUENCE_RUNNING_STATE, (a1)
0060F8C2                          2098  
0060F8C2  4E75                    2099      rts
0060F8C4                          2100  
0060F8C4                          2101  
0060F8C4                          2102  -------------------- end include --------------------
0060F8C4                          2103      INCLUDE "GameExitCleanup.X68"
0060F8C4                          2104  
0060F8C4  =00000002               2105  SOUND_PLAYER_STOP_SOUND             EQU 2
0060F8C4                          2106  
0060F8C4                          2107  GameExitCleanup
0060F8C4                          2108  
0060F8C4                          2109      * Stop bg music
0060F8C4  704D                    2110      move.l #LOOP_SOUND_TRAP_CODE, d0
0060F8C6  7200                    2111      moveq #0, d1
0060F8C8  7402                    2112      moveq #SOUND_PLAYER_STOP_SOUND, d2
0060F8CA  4E4F                    2113      trap #15
0060F8CC                          2114  
0060F8CC                          2115      * Clear Screen
0060F8CC  700B                    2116      move.l #CLEAR_SCREEN_TRAP_CODE, d0
0060F8CE  323C FF00               2117      move.w #CLEAR_SCREEN_MODE, d1                
0060F8D2  4E4F                    2118      trap #15
0060F8D4                          2119      
0060F8D4                          2120      * Repaint from double buffer
0060F8D4  705E                    2121      move.l #REPAINT_SCREEN_TRAP_CODE, d0
0060F8D6  4E4F                    2122      trap #15
0060F8D8                          2123      
0060F8D8  4E75                    2124      rts
0060F8DA                          2125  
0060F8DA                          2126  -------------------- end include --------------------
0060F8DA                          2127      INCLUDE "DrawGameObjects.X68"
0060F8DA                          2128  DrawGameObjects
0060F8DA  204E                    2129      move.l a6, a0
0060F8DC  43F9 0061028A           2130      lea LocationTable, a1
0060F8E2                          2131      
0060F8E2                          2132      * Get X-Coord and Lane
0060F8E2  3A28 0000               2133      move.w GET_X_POS(a0), d5                            ; d5 = X-Coord
0060F8E6  7C00                    2134      moveq #0, d6
0060F8E8  1C28 0003               2135      move.b GET_LANE(a0), d6                             ; d6 = Lane
0060F8EC  E30E                    2136      lsl.b #1, d6
0060F8EE  3C31 6000               2137      move.w (a1, d6), d6                                 ; d6 = Lane Location
0060F8F2                          2138     
0060F8F2                          2139      * Set Pen Color
0060F8F2  7050                    2140      move.l #PEN_COLOR_TRAP_CODE, d0
0060F8F4  223C 00D28049           2141      move.l #WATER_COLOR, d1
0060F8FA  4E4F                    2142      trap #15
0060F8FC                          2143      
0060F8FC                          2144      * Draw Water Block
0060F8FC  3406                    2145      move.w d6, d2
0060F8FE  3806                    2146      move.w d6, d4
0060F900  0644 0018               2147      addi.w #(JELLY_HEIGHT/2), d4                        ; d4 = ypos + (JELLY_HEIGHT/2)
0060F904  0442 0018               2148      subi.w #(JELLY_HEIGHT/2), d2                        ; d2 = ypos - (JELLY_HEIGHT/2)
0060F908  3205                    2149      move.w d5, d1
0060F90A  1028 0002               2150      move.b GET_SPEED(a0), d0
0060F90E  4880                    2151      ext.w d0                                            ; Get change in position (speed)
0060F910  9240                    2152      sub.w d0, d1                                        ; d1 = xpos - speed                                     
0060F912  3605                    2153      move.w d5, d3
0060F914  0643 0048               2154      addi.w #FISH_WIDTH, d3
0060F918  9640                    2155      sub.w d0, d3                                        ; d3 = xpos + FISH_WIDTH - speed
0060F91A  7057                    2156      move.l #DRAW_RECT_TRAP_CODE, d0
0060F91C  4E4F                    2157      trap #15
0060F91E                          2158      
0060F91E                          2159      * Get Type and Frame
0060F91E  1428 0004               2160      move.b GET_TYPE(a0), d2                             ; d2 = Type
0060F922  7600                    2161      moveq #0, d3                                 
0060F924  1628 0005               2162      move.b GET_FRAME(a0), d3                            ; d3 = Frame                                 
0060F928                          2163      
0060F928                          2164      * Check for fish direction
0060F928  0C02 0000               2165      cmpi.b #FISH_TYPE, d2
0060F92C  6638                    2166      bne.s NotFish
0060F92E  45F9 0003EC44           2167      lea FishQuickSave, a2
0060F934  1028 0002               2168      move.b GET_SPEED(a0), d0
0060F938  6A06                    2169      bpl.b PositiveSpeed
0060F93A  45F9 00048E44           2170      lea FlippedFishQuickSave, a2
0060F940                          2171  PositiveSpeed
0060F940                          2172  
0060F940                          2173      *----------Draw Fish----------*
0060F940  C6FC 0A20               2174      mulu.w #(FISH_WIDTH*FISH_HEIGHT), d3                ; Set offset baed on current frame
0060F944  2F03                    2175      move.l d3, -(sp)                                    ; Save Offset
0060F946  2F0A                    2176      move.l a2, -(sp)                                    ; Save Location
0060F948  2F3C 00000048           2177      move.l #FISH_WIDTH, -(sp)                           ; Save width
0060F94E  2F3C 00000024           2178      move.l #FISH_HEIGHT, -(sp)                          ; Save height
0060F954  2F05                    2179      move.l d5, -(sp)                                    ; Display X
0060F956  0446 0012               2180      subi.w #(FISH_HEIGHT/2), d6
0060F95A  2F06                    2181      move.l d6, -(sp)                                    ; Display Y
0060F95C  4EB8 12A0               2182      jsr QuickDraw
0060F960  DFFC 00000018           2183      add.l #QUICK_DRAW_STACK_SIZE, sp
0060F966                          2184  NotFish
0060F966                          2185      
0060F966                          2186      *----------Draw Boot----------*
0060F966  0C02 0001               2187      cmpi.b #BOOT_TYPE, d2
0060F96A  662C                    2188      bne.s NotBoot
0060F96C                          2189  
0060F96C  45F9 00053044           2190      lea BootQuickSave, a2
0060F972  C6FC 0900               2191      mulu.w #(BOOT_WIDTH*BOOT_HEIGHT), d3                ; Set offset baed on current frame
0060F976  2F03                    2192      move.l d3, -(sp)                                    ; Save Offset
0060F978  2F0A                    2193      move.l a2, -(sp)                                    ; Save Location
0060F97A  2F3C 00000030           2194      move.l #BOOT_WIDTH, -(sp)                           ; Save width
0060F980  2F3C 00000030           2195      move.l #BOOT_HEIGHT, -(sp)                          ; Save height
0060F986  2F05                    2196      move.l d5, -(sp)                                    ; Display X
0060F988  0446 0018               2197      subi.w #(BOOT_HEIGHT/2), d6
0060F98C  2F06                    2198      move.l d6, -(sp)                                    ; Display Y
0060F98E  4EB8 12A0               2199      jsr QuickDraw
0060F992  DFFC 00000018           2200      add.l #QUICK_DRAW_STACK_SIZE, sp
0060F998                          2201  NotBoot
0060F998                          2202      
0060F998                          2203      *----------Draw Jelly----------*
0060F998  0C02 0002               2204      cmpi.b #JELLY_TYPE, d2
0060F99C  662C                    2205      bne.s NotJelly
0060F99E                          2206  
0060F99E  45F9 0005C044           2207      lea JellyQuickSave, a2
0060F9A4  C6FC 0900               2208      mulu.w #(JELLY_WIDTH*JELLY_HEIGHT), d3              ; Set offset baed on current frame
0060F9A8  2F03                    2209      move.l d3, -(sp)                                    ; Save Offset
0060F9AA  2F0A                    2210      move.l a2, -(sp)                                    ; Save Location
0060F9AC  2F3C 00000030           2211      move.l #JELLY_WIDTH, -(sp)                          ; Save width
0060F9B2  2F3C 00000030           2212      move.l #JELLY_HEIGHT, -(sp)                         ; Save height
0060F9B8  2F05                    2213      move.l d5, -(sp)                                    ; Display X
0060F9BA  0446 0018               2214      subi.w #(JELLY_HEIGHT/2), d6
0060F9BE  2F06                    2215      move.l d6, -(sp)                                    ; Display Y
0060F9C0  4EB8 12A0               2216      jsr QuickDraw
0060F9C4  DFFC 00000018           2217      add.l #QUICK_DRAW_STACK_SIZE, sp
0060F9CA                          2218  NotJelly
0060F9CA                          2219      
0060F9CA                          2220      *----------Draw Mullet----------*
0060F9CA  0C02 0004               2221      cmpi.b #MULLET_TYPE, d2
0060F9CE  662C                    2222      bne.s NotMullet
0060F9D0                          2223  
0060F9D0  45F9 00065044           2224      lea MulletQuickSave, a2
0060F9D6  C6FC 1680               2225      mulu.w #(MULLET_WIDTH*MULLET_HEIGHT), d3            ; Set offset baed on current frame
0060F9DA  2F03                    2226      move.l d3, -(sp)                                    ; Save Offset
0060F9DC  2F0A                    2227      move.l a2, -(sp)                                    ; Save Location
0060F9DE  2F3C 00000078           2228      move.l #MULLET_WIDTH, -(sp)                         ; Save width
0060F9E4  2F3C 00000030           2229      move.l #MULLET_HEIGHT, -(sp)                        ; Save height
0060F9EA  2F05                    2230      move.l d5, -(sp)                                    ; Display X
0060F9EC  0446 0018               2231      subi.w #(MULLET_HEIGHT/2), d6
0060F9F0  2F06                    2232      move.l d6, -(sp)                                    ; Display Y
0060F9F2  4EB8 12A0               2233      jsr QuickDraw
0060F9F6  DFFC 00000018           2234      add.l #QUICK_DRAW_STACK_SIZE, sp
0060F9FC                          2235  NotMullet
0060F9FC                          2236  
0060F9FC  4E75                    2237      rts
0060F9FE                          2238  
0060F9FE                          2239      
0060F9FE                          2240      
0060F9FE                          2241  
0060F9FE                          2242  
0060F9FE                          2243  
0060F9FE                          2244  
0060F9FE                          2245  
0060F9FE                          2246  
0060F9FE                          2247  
0060F9FE                          2248  
0060F9FE                          2249  
0060F9FE                          2250  
0060F9FE                          2251  
0060F9FE                          2252  
0060F9FE                          2253  
0060F9FE                          2254  
0060F9FE                          2255  
0060F9FE                          2256  -------------------- end include --------------------
0060F9FE                          2257      INCLUDE "MouseInputHandler.X68"
0060F9FE                          2258  
0060F9FE  =00000034               2259  MOUSE_LOWER_BOUND               EQU TOP_OF_POLE+10
0060F9FE  =0000022A               2260  MOUSE_UPPER_BOUND               EQU (OUTPUT_WINDOW_HEIGHT-CAUGHT_FISH_HEIGHT)-10
0060F9FE                          2261  
0060F9FE                          2262  MouseInputHandler
0060F9FE                          2263      * Get Mouse Input
0060F9FE  703D                    2264      move.l #MOUSE_INPUT_TRAP_CODE, d0
0060FA00  7200                    2265      moveq #0, d1
0060FA02  4E4F                    2266      trap #15
0060FA04  4241                    2267      clr.w d1
0060FA06  4841                    2268      swap d1
0060FA08                          2269      
0060FA08                          2270      * Check for out of bounds
0060FA08  0C81 00000034           2271      cmpi.l #MOUSE_LOWER_BOUND, d1
0060FA0E  6E02                    2272      bgt.s CorrectLowerBound
0060FA10  7234                    2273      move.l #MOUSE_LOWER_BOUND, d1
0060FA12                          2274  CorrectLowerBound
0060FA12  0C81 0000022A           2275      cmpi.l #MOUSE_UPPER_BOUND, d1
0060FA18  6D06                    2276      blt.s CorrectUpperBound
0060FA1A  223C 0000022A           2277      move.l #MOUSE_UPPER_BOUND, d1
0060FA20                          2278  CorrectUpperBound
0060FA20                          2279      
0060FA20                          2280      * Set CurrentMouseY variable
0060FA20  43F9 0060FA2A           2281      lea CurrentMouseY, a1
0060FA26  2281                    2282      move.l d1, (a1)
0060FA28                          2283      
0060FA28  4E75                    2284      rts
0060FA2A                          2285      
0060FA2A                          2286  CurrentMouseY ds.l 1
0060FA2A                          2287  -------------------- end include --------------------
0060FA2E                          2288      INCLUDE "MoveEyes.X68"
0060FA2E                          2289  
0060FA2E  =00000003               2290  EYE_WIDTH                       EQU 3
0060FA2E  =00000005               2291  EYE_HEIGHT                      EQU 5
0060FA2E                          2292  
0060FA2E  =0000003E               2293  EYE_DOWN_Y                      EQU 62
0060FA2E  =0000003B               2294  EYE_UP_Y                        EQU 59
0060FA2E                          2295  
0060FA2E  =000001DB               2296  LEFT_EYE_X                      EQU 475
0060FA2E  =000001E1               2297  RIGHT_EYE_X                     EQU 481
0060FA2E                          2298  
0060FA2E                          2299  MoveEyes   
0060FA2E                          2300      * Set Pen Color
0060FA2E  7050                    2301      move.l #PEN_COLOR_TRAP_CODE, d0
0060FA30  223C 00FFFFFF           2302      move.l #WHITE, d1
0060FA36  4E4F                    2303      trap #15
0060FA38                          2304  
0060FA38                          2305      * Set Fill Color
0060FA38  7051                    2306      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0060FA3A  223C 00FFFFFF           2307      move.l #WHITE, d1
0060FA40  4E4F                    2308      trap #15
0060FA42                          2309      
0060FA42                          2310      * Clear Face
0060FA42  223C 000001DB           2311      move.l #LEFT_EYE_X, d1
0060FA48  263C 000001E3           2312      move.l #(RIGHT_EYE_X+EYE_WIDTH-1), d3
0060FA4E  743B                    2313      move.l #EYE_UP_Y, d2  
0060FA50  7841                    2314      move.l #(EYE_DOWN_Y+EYE_HEIGHT-2), d4
0060FA52  7057                    2315      move.l #DRAW_RECT_TRAP_CODE, d0
0060FA54  4E4F                    2316      trap #15
0060FA56                          2317  
0060FA56                          2318      * Set Pen Color
0060FA56  7050                    2319      move.l #PEN_COLOR_TRAP_CODE, d0
0060FA58  7200                    2320      move.l #BLACK, d1
0060FA5A  4E4F                    2321      trap #15
0060FA5C                          2322      
0060FA5C                          2323      * Set Fill Color
0060FA5C  7051                    2324      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0060FA5E  7200                    2325      move.l #BLACK, d1
0060FA60  4E4F                    2326      trap #15
0060FA62                          2327  
0060FA62                          2328      * Check if mouse above water
0060FA62  43F9 0060FA2A           2329      lea CurrentMouseY, a1
0060FA68  2A11                    2330      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FA6A  0C85 0000008F           2331      cmpi.l #ABOVE_WATER, d5
0060FA70  6E4A                    2332      bgt.s EyesNotPointingForward
0060FA72                          2333      
0060FA72                          2334      * Draw Left Eye
0060FA72  223C 000001DB           2335      move.l #LEFT_EYE_X, d1
0060FA78  263C 000001DD           2336      move.l #(LEFT_EYE_X+EYE_WIDTH-1), d3
0060FA7E  743B                    2337      move.l #EYE_UP_Y, d2
0060FA80  783F                    2338      move.l #(EYE_UP_Y+EYE_HEIGHT-1), d4
0060FA82  7057                    2339      move.l #DRAW_RECT_TRAP_CODE, d0
0060FA84  4E4F                    2340      trap #15
0060FA86                          2341      
0060FA86                          2342      * Draw Right Eye
0060FA86  223C 000001E1           2343      move.l #RIGHT_EYE_X, d1
0060FA8C  263C 000001E3           2344      move.l #(RIGHT_EYE_X+EYE_WIDTH-1), d3
0060FA92  743B                    2345      move.l #EYE_UP_Y, d2
0060FA94  783F                    2346      move.l #(EYE_UP_Y+EYE_HEIGHT-1), d4
0060FA96  7057                    2347      move.l #DRAW_RECT_TRAP_CODE, d0
0060FA98  4E4F                    2348      trap #15
0060FA9A                          2349      
0060FA9A                          2350      * Set Pen Color
0060FA9A  7050                    2351      move.l #PEN_COLOR_TRAP_CODE, d0
0060FA9C  223C 00FFFFFF           2352      move.l #WHITE, d1
0060FAA2  4E4F                    2353      trap #15
0060FAA4                          2354      
0060FAA4                          2355      * Draw Left Eye Whites
0060FAA4  223C 000001DD           2356      move.l #(LEFT_EYE_X+EYE_WIDTH-1), d1
0060FAAA  743B                    2357      move.l #EYE_UP_Y, d2
0060FAAC  7052                    2358      move.l #DRAW_PIXEL_TRAP_CODE, d0
0060FAAE  4E4F                    2359      trap #15
0060FAB0                          2360      
0060FAB0                          2361      * Draw Right Eye
0060FAB0  223C 000001E3           2362      move.l #(RIGHT_EYE_X+EYE_WIDTH-1), d1
0060FAB6  743B                    2363      move.l #EYE_UP_Y, d2
0060FAB8  7052                    2364      move.l #DRAW_PIXEL_TRAP_CODE, d0
0060FABA  4E4F                    2365      trap #15
0060FABC                          2366  
0060FABC                          2367      
0060FABC                          2368  EyesNotPointingForward   
0060FABC                          2369      
0060FABC                          2370      
0060FABC                          2371      * Check if mouse below water
0060FABC  43F9 0060FA2A           2372      lea CurrentMouseY, a1
0060FAC2  2A11                    2373      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FAC4  0C85 0000008F           2374      cmpi.l #ABOVE_WATER, d5
0060FACA  6F4A                    2375      ble.s EyesNotPointingDown
0060FACC                          2376      
0060FACC                          2377      * Draw Left Eye
0060FACC  223C 000001DB           2378      move.l #LEFT_EYE_X, d1
0060FAD2  263C 000001DD           2379      move.l #(LEFT_EYE_X+EYE_WIDTH-1), d3
0060FAD8  743E                    2380      move.l #EYE_DOWN_Y, d2
0060FADA  7842                    2381      move.l #(EYE_DOWN_Y+EYE_HEIGHT-1), d4
0060FADC  7057                    2382      move.l #DRAW_RECT_TRAP_CODE, d0
0060FADE  4E4F                    2383      trap #15
0060FAE0                          2384      
0060FAE0                          2385      * Draw Right Eye
0060FAE0  223C 000001E1           2386      move.l #RIGHT_EYE_X, d1
0060FAE6  263C 000001E3           2387      move.l #(RIGHT_EYE_X+EYE_WIDTH-1), d3
0060FAEC  743E                    2388      move.l #EYE_DOWN_Y, d2
0060FAEE  7842                    2389      move.l #(EYE_DOWN_Y+EYE_HEIGHT-1), d4
0060FAF0  7057                    2390      move.l #DRAW_RECT_TRAP_CODE, d0
0060FAF2  4E4F                    2391      trap #15
0060FAF4                          2392      
0060FAF4                          2393      * Set Pen Color
0060FAF4  7050                    2394      move.l #PEN_COLOR_TRAP_CODE, d0
0060FAF6  223C 00FFFFFF           2395      move.l #WHITE, d1
0060FAFC  4E4F                    2396      trap #15
0060FAFE                          2397      
0060FAFE                          2398      * Draw Left Eye Whites
0060FAFE  223C 000001DD           2399      move.l #(LEFT_EYE_X+EYE_WIDTH-1), d1
0060FB04  743E                    2400      move.l #EYE_DOWN_Y, d2
0060FB06  7052                    2401      move.l #DRAW_PIXEL_TRAP_CODE, d0
0060FB08  4E4F                    2402      trap #15
0060FB0A                          2403      
0060FB0A                          2404      * Draw Right Eye
0060FB0A  223C 000001E3           2405      move.l #(RIGHT_EYE_X+EYE_WIDTH-1), d1
0060FB10  743E                    2406      move.l #EYE_DOWN_Y, d2
0060FB12  7052                    2407      move.l #DRAW_PIXEL_TRAP_CODE, d0
0060FB14  4E4F                    2408      trap #15
0060FB16                          2409  
0060FB16                          2410  EyesNotPointingDown
0060FB16                          2411  
0060FB16                          2412      * Set Fill Color
0060FB16  7051                    2413      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0060FB18  223C 00D28049           2414      move.l #WATER_COLOR, d1
0060FB1E  4E4F                    2415      trap #15
0060FB20                          2416      
0060FB20  4E75                    2417      rts
0060FB22                          2418  
0060FB22                          2419  
0060FB22                          2420  
0060FB22                          2421  
0060FB22                          2422  
0060FB22                          2423  
0060FB22                          2424  -------------------- end include --------------------
0060FB22                          2425      INCLUDE "CheckForCollision.X68"
0060FB22                          2426  CheckForCollision  
0060FB22  204E                    2427      move.l a6, a0                                       ; get current GameObject 
0060FB24  1828 0004               2428      move.b GET_TYPE(a0), d4                             ; d4 = Type
0060FB28                          2429  
0060FB28                          2430      
0060FB28                          2431      *---FISH COLLISION---*
0060FB28  0C04 0000               2432      cmpi.b #FISH_TYPE, d4       
0060FB2C  664A                    2433      bne.s NotFishCollision
0060FB2E                          2434      
0060FB2E  43F9 0060FA2A           2435      lea CurrentMouseY, a1
0060FB34  2A11                    2436      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FB36                          2437  
0060FB36                          2438      * Get Location and type
0060FB36  43F9 0061028A           2439      lea LocationTable, a1                               ; get LocationTable
0060FB3C  3028 0000               2440      move.w GET_X_POS(a0), d0                            ; get current GameObject x-position
0060FB40  7400                    2441      moveq #0, d2
0060FB42  1428 0003               2442      move.b GET_LANE(a0), d2                             ; d2 = Lane
0060FB46  E30A                    2443      lsl.b #1, d2
0060FB48  3431 2000               2444      move.w (a1, d2), d2                                 ; d2 = Lane Location
0060FB4C                          2445      
0060FB4C                          2446      * Check X-Collision fish
0060FB4C  0C40 0127               2447      cmpi.w #(POLE_X-FISH_WIDTH), d0
0060FB50  6D00 0110               2448      blt NoCollision
0060FB54  0C40 016F               2449      cmpi.w #POLE_X, d0
0060FB58  6E00 0108               2450      bgt NoCollision
0060FB5C                          2451      
0060FB5C                          2452      * Check Y-Collision fish
0060FB5C  3602                    2453      move.w d2, d3
0060FB5E  0442 0012               2454      subi.w #(FISH_HEIGHT/2), d2
0060FB62  0643 0012               2455      addi.w #(FISH_HEIGHT/2), d3
0060FB66  BA42                    2456      cmp.w d2, d5
0060FB68  6D00 00F8               2457      blt NoCollision
0060FB6C  BA43                    2458      cmp.w d3, d5
0060FB6E  6E00 00F2               2459      bgt NoCollision
0060FB72  4EB9 0007B99A           2460      jsr HandleFishCollision
0060FB78                          2461  NotFishCollision
0060FB78                          2462      
0060FB78  204E                    2463      move.l a6, a0                                       ; get current GameObject 
0060FB7A  1828 0004               2464      move.b GET_TYPE(a0), d4                             ; d4 = Type
0060FB7E                          2465      
0060FB7E                          2466      
0060FB7E                          2467      *---BOOT COLLISION---*
0060FB7E  0C04 0001               2468      cmpi.b #BOOT_TYPE, d4
0060FB82  664A                    2469      bne.s NotBootCollision
0060FB84                          2470      
0060FB84  43F9 0060FA2A           2471      lea CurrentMouseY, a1
0060FB8A  2A11                    2472      move.l (a1), d5                                     ; d5 = CurrentMouseY5
0060FB8C                          2473      
0060FB8C                          2474      * Get Location and type
0060FB8C  43F9 0061028A           2475      lea LocationTable, a1                               ; get LocationTable
0060FB92  3028 0000               2476      move.w GET_X_POS(a0), d0                            ; get current GameObject x-position
0060FB96  7400                    2477      moveq #0, d2
0060FB98  1428 0003               2478      move.b GET_LANE(a0), d2                             ; d2 = Lane
0060FB9C  E30A                    2479      lsl.b #1, d2
0060FB9E  3431 2000               2480      move.w (a1, d2), d2                                 ; d2 = Lane Location
0060FBA2                          2481      
0060FBA2                          2482      * Check X-Collision boot
0060FBA2  0C40 013F               2483      cmpi.w #(POLE_X-BOOT_WIDTH), d0
0060FBA6  6D00 00BA               2484      blt NoCollision
0060FBAA  0C40 016F               2485      cmpi.w #POLE_X, d0
0060FBAE  6E00 00B2               2486      bgt NoCollision
0060FBB2                          2487      
0060FBB2                          2488      * Check Y-Collision boot
0060FBB2  3602                    2489      move.w d2, d3
0060FBB4  0442 0018               2490      subi.w #(BOOT_HEIGHT/2), d2
0060FBB8  0643 0018               2491      addi.w #(BOOT_HEIGHT/2), d3
0060FBBC  BA42                    2492      cmp.w d2, d5
0060FBBE  6D00 00A2               2493      blt NoCollision
0060FBC2  BA43                    2494      cmp.w d3, d5
0060FBC4  6E00 009C               2495      bgt NoCollision
0060FBC8  4EB9 0007B9F6           2496      jsr HandleBootCollision
0060FBCE                          2497  NotBootCollision
0060FBCE                          2498      
0060FBCE  204E                    2499      move.l a6, a0                                       ; get current GameObject 
0060FBD0  1828 0004               2500      move.b GET_TYPE(a0), d4                             ; d4 = Type
0060FBD4                          2501      
0060FBD4                          2502      *---JELLY COLLISION---*
0060FBD4  0C04 0002               2503      cmpi.b #JELLY_TYPE, d4
0060FBD8  663E                    2504      bne.s NotJellyCollision
0060FBDA                          2505      
0060FBDA  43F9 0060FA2A           2506      lea CurrentMouseY, a1
0060FBE0  2A11                    2507      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FBE2                          2508      
0060FBE2                          2509      * Get Location and type
0060FBE2  43F9 0061028A           2510      lea LocationTable, a1                               ; get LocationTable
0060FBE8  3028 0000               2511      move.w GET_X_POS(a0), d0                            ; get current GameObject x-position
0060FBEC  7400                    2512      moveq #0, d2
0060FBEE  1428 0003               2513      move.b GET_LANE(a0), d2                             ; d2 = Lane
0060FBF2  E30A                    2514      lsl.b #1, d2
0060FBF4  3431 2000               2515      move.w (a1, d2), d2                                 ; d2 = Lane Location
0060FBF8                          2516      
0060FBF8                          2517      * Check X-Collision jelly
0060FBF8  0C40 013F               2518      cmpi.w #(POLE_X-JELLY_WIDTH), d0
0060FBFC  6D00 0064               2519      blt NoCollision
0060FC00  0C40 016F               2520      cmpi.w #POLE_X, d0
0060FC04  6E00 005C               2521      bgt NoCollision
0060FC08                          2522      
0060FC08                          2523      * Check Y-Collision jelly
0060FC08  0442 0018               2524      sub.w #(JELLY_HEIGHT/2), d2
0060FC0C  B445                    2525      cmp.w d5, d2
0060FC0E  6E00 0052               2526      bgt NoCollision
0060FC12  4EB9 0007BA56           2527      jsr HandleJellyCollision
0060FC18                          2528  NotJellyCollision 
0060FC18                          2529  
0060FC18  204E                    2530      move.l a6, a0                                       ; get current GameObject 
0060FC1A  1828 0004               2531      move.b GET_TYPE(a0), d4                             ; d4 = Type
0060FC1E                          2532      
0060FC1E                          2533      *---MULLET COLLISION---*
0060FC1E  0C04 0004               2534      cmpi.b #MULLET_TYPE, d4
0060FC22  663E                    2535      bne.s NotMulletCollision
0060FC24                          2536      
0060FC24  43F9 0060FA2A           2537      lea CurrentMouseY, a1
0060FC2A  2A11                    2538      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FC2C                          2539      
0060FC2C                          2540      * Get Location and type
0060FC2C  43F9 0061028A           2541      lea LocationTable, a1                               ; get LocationTable
0060FC32  3028 0000               2542      move.w GET_X_POS(a0), d0                            ; get current GameObject x-position
0060FC36  7400                    2543      moveq #0, d2
0060FC38  1428 0003               2544      move.b GET_LANE(a0), d2                             ; d2 = Lane
0060FC3C  E30A                    2545      lsl.b #1, d2
0060FC3E  3431 2000               2546      move.w (a1, d2), d2                                 ; d2 = Lane Location
0060FC42                          2547      
0060FC42                          2548      * Check X-Collision jelly
0060FC42  0C40 00F7               2549      cmpi.w #(POLE_X-MULLET_WIDTH), d0
0060FC46  6D00 001A               2550      blt NoCollision
0060FC4A  0C40 016F               2551      cmpi.w #POLE_X, d0
0060FC4E  6E00 0012               2552      bgt NoCollision
0060FC52                          2553      
0060FC52                          2554      * Check Y-Collision jelly
0060FC52  0442 0018               2555      sub.w #(MULLET_HEIGHT/2), d2
0060FC56  B445                    2556      cmp.w d5, d2
0060FC58  6E00 0008               2557      bgt NoCollision
0060FC5C  4EB9 0007BA8C           2558      jsr HandleMulletCollision
0060FC62                          2559  NotMulletCollision
0060FC62                          2560  
0060FC62                          2561  NoCollision
0060FC62                          2562  
0060FC62  4E75                    2563      rts
0060FC64                          2564  
0060FC64                          2565  
0060FC64                          2566  
0060FC64                          2567  
0060FC64                          2568      
0060FC64                          2569  
0060FC64                          2570  
0060FC64                          2571  
0060FC64                          2572  
0060FC64                          2573  
0060FC64                          2574  
0060FC64                          2575  
0060FC64                          2576  
0060FC64                          2577  
0060FC64                          2578  -------------------- end include --------------------
0060FC64                          2579      INCLUDE "FleeingFishPhysicsUpdate.X68"
0060FC64  =00000000               2580  GET_Y_POSITION                  EQU 0
0060FC64  =00000004               2581  GET_Y_VELOCITY                  EQU 4
0060FC64  =00000008               2582  GET_X_POSITION                  EQU 8
0060FC64  =0000000A               2583  GET_X_VELOCITY                  EQU 10
0060FC64                          2584  
0060FC64  =00000004               2585  NUM_FRACTIONAL_BITS             EQU 4
0060FC64  =0000000C               2586  GRAVITY                         EQU %01100              ; 0.1100 = 0.75
0060FC64  =00000002               2587  FISH_FLEE_X_VELOCITY            EQU 2
0060FC64                          2588  
0060FC64                          2589  FleeingFishPhysicsUpdate
0060FC64  45F9 0060FD42           2590      lea FleeingFishPhysicsManager, a2
0060FC6A  7800                    2591      moveq #0, d4
0060FC6C  362A 0008               2592      move.w GET_X_POSITION(a2), d3                       ; d4 = x-pos
0060FC70  2A2A 0000               2593      move.l GET_Y_POSITION(a2), d5                       ; d5 = y-pos
0060FC74  2C2A 0004               2594      move.l GET_Y_VELOCITY(a2), d6                       ; d6 = y velocity
0060FC78  E88D                    2595      lsr.l #NUM_FRACTIONAL_BITS, d5
0060FC7A  E88E                    2596      lsr.l #NUM_FRACTIONAL_BITS, d6
0060FC7C                          2597      
0060FC7C  0C85 00000234           2598      cmpi.l #(OUTPUT_WINDOW_HEIGHT-CAUGHT_FISH_HEIGHT), d5
0060FC82  6C00 00BC               2599      bge SkipPhysicsUpdate
0060FC86                          2600      
0060FC86                          2601      * Draw BG
0060FC86  45F9 00281560           2602      lea BG_BITMAP, a2
0060FC8C  2F3C 0000008A           2603      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
0060FC92  2F3C 000002F8           2604      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                  ; Bitmap Width
0060FC98  2F3C 00000258           2605      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                 ; Bitmap Height
0060FC9E  2F0A                    2606      move.l a2, -(sp)                                    ; Bitmap Signature
0060FCA0  2F03                    2607      move.l d3, -(sp)                                    ; Bitmap Chunk X
0060FCA2  2F05                    2608      move.l d5, -(sp)                                    ; Bitmap Chunk Y
0060FCA4  2F3C 00000012           2609      move.l #CAUGHT_FISH_WIDTH, -(sp)                    ; Bitmap Chunk Width
0060FCAA  2F3C 00000024           2610      move.l #CAUGHT_FISH_HEIGHT, -(sp)                   ; Bitmap Chunk Height
0060FCB0  2F03                    2611      move.l d3, -(sp)                                    ; Output Screen X
0060FCB2  2F05                    2612      move.l d5, -(sp)                                    ; Output Screen Y
0060FCB4  4EB9 0007B844           2613      jsr DisplayBitmapChunk
0060FCBA  DFFC 00000028           2614      add.l #BM_CHUNKER_STACK_SIZE, sp
0060FCC0                          2615      
0060FCC0                          2616      * Update position and velocity
0060FCC0  7600                    2617      moveq #0, d3
0060FCC2  7800                    2618      moveq #0, d4
0060FCC4  45F9 0060FD42           2619      lea FleeingFishPhysicsManager, a2
0060FCCA  362A 0008               2620      move.w GET_X_POSITION(a2), d3                       ; d3 = x-pos
0060FCCE  382A 000A               2621      move.w GET_X_VELOCITY(a2), d4                       ; d4 = x velocity
0060FCD2  2A2A 0000               2622      move.l GET_Y_POSITION(a2), d5                       ; d5 = y-pos
0060FCD6  2C2A 0004               2623      move.l GET_Y_VELOCITY(a2), d6                       ; d6 = y velocity
0060FCDA                          2624  
0060FCDA  0686 0000000C           2625      add.l #GRAVITY, d6                                  ; Increase y velocity
0060FCE0  DA86                    2626      add.l d6, d5                                        ; Increase y position
0060FCE2  D644                    2627      add.w d4, d3                                        ; Increase x position
0060FCE4  3543 0008               2628      move.w d3, GET_X_POSITION(a2)
0060FCE8  2545 0000               2629      move.l d5, GET_Y_POSITION(a2)
0060FCEC  2546 0004               2630      move.l d6, GET_Y_VELOCITY(a2)
0060FCF0  E88D                    2631      lsr.l #NUM_FRACTIONAL_BITS, d5
0060FCF2  E88E                    2632      lsr.l #NUM_FRACTIONAL_BITS, d6
0060FCF4                          2633  
0060FCF4  0C85 00000234           2634      cmpi.l #OUTPUT_WINDOW_HEIGHT-CAUGHT_FISH_HEIGHT, d5
0060FCFA  6C00 0044               2635      bge SkipPhysicsUpdate
0060FCFE                          2636      
0060FCFE                          2637      * Draw fish
0060FCFE  45F9 000157FC           2638      lea CAUGHT_FISH_BITMAP, a2
0060FD04  2F3C 0000008A           2639      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
0060FD0A  2F3C 00000012           2640      move.l #CAUGHT_FISH_WIDTH, -(sp)                    ; Bitmap Width
0060FD10  2F3C 00000024           2641      move.l #CAUGHT_FISH_HEIGHT, -(sp)                   ; Bitmap Height
0060FD16  2F0A                    2642      move.l a2, -(sp)                                    ; Bitmap Signature
0060FD18  2F3C 00000000           2643      move.l #0, -(sp)                                    ; Bitmap Chunk X
0060FD1E  2F3C 00000000           2644      move.l #0, -(sp)                                    ; Bitmap Chunk Y
0060FD24  2F3C 00000012           2645      move.l #CAUGHT_FISH_WIDTH, -(sp)                    ; Bitmap Chunk Width
0060FD2A  2F3C 00000024           2646      move.l #CAUGHT_FISH_HEIGHT, -(sp)                   ; Bitmap Chunk Height
0060FD30  2F03                    2647      move.l d3, -(sp)                                    ; Output Screen X
0060FD32  2F05                    2648      move.l d5, -(sp)                                    ; Output Screen Y
0060FD34  4EB9 0007B844           2649      jsr DisplayBitmapChunk
0060FD3A  DFFC 00000028           2650      add.l #BM_CHUNKER_STACK_SIZE, sp
0060FD40                          2651      
0060FD40                          2652  SkipPhysicsUpdate
0060FD40                          2653      
0060FD40  4E75                    2654      rts
0060FD42                          2655  
0060FD42                          2656  
0060FD42                          2657  FleeingFishPhysicsManager ds.l 3
0060FD4E                          2658  
0060FD4E                          2659  
0060FD4E                          2660  
0060FD4E                          2661  -------------------- end include --------------------
0060FD4E                          2662      INCLUDE "CatchFish.X68"
0060FD4E                          2663  
0060FD4E  =00000121               2664  COOLER_ONES_X                   EQU 289
0060FD4E  =0000006E               2665  COOLER_ONES_Y                   EQU 110
0060FD4E  =0000010E               2666  COOLER_TENS_X                   EQU 270
0060FD4E  =00000073               2667  COOLER_TENS_Y                   EQU 115
0060FD4E                          2668  
0060FD4E  =0000000A               2669  COOLER_SEGMENT_SIZE             EQU 10
0060FD4E  =00000003               2670  COOLER_SEGMENT_WIDTH            EQU 3
0060FD4E  =00000002               2671  COOLER_SLANT_OFFSET             EQU 2
0060FD4E                          2672  
0060FD4E                          2673  CatchFish
0060FD4E                          2674      * Check for mouse click input 
0060FD4E  703D                    2675      move.l #MOUSE_INPUT_TRAP_CODE, d0
0060FD50  7200                    2676      moveq #0, d1                                        ; Set mode to "read mouse down state"
0060FD52  4E4F                    2677      trap #15
0060FD54  0800 0000               2678      btst #0, d0 
0060FD58  6700 0088               2679      beq CannotCatchFish
0060FD5C                          2680  
0060FD5C                          2681      * Check if fish is on line
0060FD5C  43F9 00610284           2682      lea FishingManagerTable, a1
0060FD62  7000                    2683      moveq #0, d0
0060FD64  1029 0001               2684      move.b GET_IS_FISH_ON_HOOK(a1), d0
0060FD68  6778                    2685      beq.s CannotCatchFish
0060FD6A                          2686      
0060FD6A                          2687      * Check for correct bounds to catch fish
0060FD6A  43F9 0060FA2A           2688      lea CurrentMouseY, a1
0060FD70  2A11                    2689      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FD72  0C85 0000008F           2690      cmpi.l #ABOVE_WATER, d5
0060FD78  6E68                    2691      bgt.s CannotCatchFish
0060FD7A                          2692      
0060FD7A                          2693      * Catch Fish
0060FD7A  43F9 00610284           2694      lea FishingManagerTable, a1
0060FD80  5229 0000               2695      addi.b #1, GET_NUM_FISH_CAUGHT(a1)                  ; Increase fish count by 1
0060FD84  137C 0000 0001          2696      move.b #0, GET_IS_FISH_ON_HOOK(a1)                  ; Remove fish from line
0060FD8A                          2697      
0060FD8A                          2698      * Update 7 Segment Display Ones Place
0060FD8A  43F9 00610284           2699      lea FishingManagerTable, a1
0060FD90  3F3C 0121               2700      move.w #COOLER_ONES_X, -(sp)                        ; display coordinate X         
0060FD94  3F3C 006E               2701      move.w #COOLER_ONES_Y, -(sp)                        ; display coordinate Y
0060FD98  3F3C 000A               2702      move.w #COOLER_SEGMENT_SIZE, -(sp)                  ; segment size
0060FD9C  7000                    2703      moveq #0, d0
0060FD9E  1029 0000               2704      move.b GET_NUM_FISH_CAUGHT(a1), d0
0060FDA2  80FC 000A               2705      divu #10, d0
0060FDA6  4840                    2706      swap d0
0060FDA8  3F00                    2707      move.w d0, -(sp)                                    ; number to display (0-9)
0060FDAA  4EB9 0007BB06           2708      jsr DrawNumber
0060FDB0  508F                    2709      add.l #8, sp
0060FDB2                          2710      
0060FDB2                          2711      * Update 7 Segment Display Tens Place
0060FDB2  43F9 00610284           2712      lea FishingManagerTable, a1
0060FDB8  3F3C 010E               2713      move.w #COOLER_TENS_X, -(sp)                        ; display coordinate X         
0060FDBC  3F3C 0073               2714      move.w #COOLER_TENS_Y, -(sp)                        ; display coordinate Y
0060FDC0  3F3C 000A               2715      move.w #COOLER_SEGMENT_SIZE, -(sp)                  ; segment size
0060FDC4  7000                    2716      moveq #0, d0
0060FDC6  1029 0000               2717      move.b GET_NUM_FISH_CAUGHT(a1), d0
0060FDCA  80FC 000A               2718      divu #10, d0
0060FDCE  3F00                    2719      move.w d0, -(sp)                                    ; number to display (0-9)
0060FDD0  4EB9 0007BB06           2720      jsr DrawNumber
0060FDD6  508F                    2721      add.l #8, sp
0060FDD8                          2722      
0060FDD8                          2723      * Catch Fish Sound Effect                        
0060FDD8  7049                    2724      move.l #PLAY_SOUND_TRAP_CODE, d0
0060FDDA  43F9 0060FDE4           2725      lea CatchFishSound, a1
0060FDE0  4E4F                    2726      trap #15
0060FDE2                          2727      
0060FDE2                          2728  CannotCatchFish
0060FDE2                          2729  
0060FDE2  4E75                    2730      rts
0060FDE4                          2731      
0060FDE4= 4173 7365 7473 5...     2732  CatchFishSound dc.w 'Assets\sounds\get_fish.wav', 0
0060FDE4= 4173 7365 7473 5...     2733  -------------------- end include --------------------
0060FE00                          2734      INCLUDE "GetNewWorm.X68"
0060FE00                          2735  
0060FE00                          2736  GetNewWorm
0060FE00                          2737      * Check for mouse click input 
0060FE00  703D                    2738      move.l #MOUSE_INPUT_TRAP_CODE, d0
0060FE02  7200                    2739      moveq #0, d1                                        ; Set mode to "read mouse down state"
0060FE04  4E4F                    2740      trap #15
0060FE06  0800 0000               2741      btst #0, d0 
0060FE0A  6700 0088               2742      beq CannotGetNewWorm
0060FE0E                          2743  
0060FE0E                          2744      * Check if you do not have a worm
0060FE0E  43F9 00610284           2745      lea FishingManagerTable, a1
0060FE14  7000                    2746      moveq #0, d0
0060FE16  1029 0003               2747      move.b GET_IS_WORM_ON_HOOK(a1), d0
0060FE1A  6678                    2748      bne.s CannotGetNewWorm
0060FE1C                          2749      
0060FE1C                          2750      * Check for correct bounds to catch fish
0060FE1C  43F9 0060FA2A           2751      lea CurrentMouseY, a1
0060FE22  2A11                    2752      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FE24  0C85 0000008F           2753      cmpi.l #ABOVE_WATER, d5
0060FE2A  6E68                    2754      bgt.s CannotGetNewWorm
0060FE2C                          2755      
0060FE2C                          2756      * Catch Fish
0060FE2C  43F9 00610284           2757      lea FishingManagerTable, a1
0060FE32  5329 0002               2758      sub.b #1, GET_NUM_WORMS_LEFT(a1)                    ; Decrease worm count by 1
0060FE36  137C 0001 0003          2759      move.b #1, GET_IS_WORM_ON_HOOK(a1)                  ; Add worm to line
0060FE3C                          2760      
0060FE3C                          2761      * Change worm counter display
0060FE3C  1029 0002               2762      move.b GET_NUM_WORMS_LEFT(a1), d0
0060FE40  45F9 0043EAEA           2763      lea WORM_COUNT_BITMAP, a2
0060FE46  2F3C 0000008A           2764      move.l #PA_OFFSET, -(sp)                             ; Bitmap Offset
0060FE4C  2F3C 00000049           2765      move.l #WORM_COUNT_WIDTH, -(sp)                      ; Bitmap Width
0060FE52  2F3C 00000110           2766      move.l #(WORM_COUNT_HEIGHT*4), -(sp)                 ; Bitmap Height
0060FE58  2F0A                    2767      move.l a2, -(sp)                                     ; Bitmap Signature
0060FE5A  2F3C 00000000           2768      move.l #0, -(sp)                                     ; Bitmap Chunk X
0060FE60  C0FC 0044               2769      mulu #WORM_COUNT_HEIGHT, d0
0060FE64  2F00                    2770      move.l d0, -(sp)                                     ; Bitmap Chunk Y
0060FE66  2F3C 00000049           2771      move.l #WORM_COUNT_WIDTH, -(sp)                      ; Bitmap Chunk Width
0060FE6C  2F3C 00000044           2772      move.l #WORM_COUNT_HEIGHT, -(sp)                     ; Bitmap Chunk Height
0060FE72  2F3C 0000000F           2773      move.l #WORM_COUNT_X, -(sp)                          ; Output Screen X
0060FE78  2F3C 00000014           2774      move.l #WORM_COUNT_Y, -(sp)                          ; Output Screen Y
0060FE7E  4EB9 0007B844           2775      jsr DisplayBitmapChunk
0060FE84  DFFC 00000028           2776      add.l #BM_CHUNKER_STACK_SIZE, sp
0060FE8A                          2777      
0060FE8A                          2778      * Play ding sound?                      
0060FE8A  7049                    2779      move.l #PLAY_SOUND_TRAP_CODE, d0
0060FE8C  43F9 0060FE96           2780      lea DingSound, a1
0060FE92  4E4F                    2781      trap #15
0060FE94                          2782      
0060FE94                          2783  CannotGetNewWorm
0060FE94                          2784  
0060FE94  4E75                    2785      rts
0060FE96                          2786      
0060FE96= 4173 7365 7473 5...     2787  DingSound dc.w 'Assets\sounds\new_worm.wav', 0
0060FEB2                          2788  
0060FEB2                          2789  -------------------- end include --------------------
0060FEB2                          2790      INCLUDE "BoundsCheck.X68"
0060FEB2                          2791  BoundsCheck
0060FEB2  43F9 00610288           2792      lea GameState, a1
0060FEB8  0C11 0002               2793      cmpi.b #MULLET_SEQUENCE_RUNNING_STATE, (a1)
0060FEBC  6600 001C               2794      bne MulletNotSpawned
0060FEC0                          2795      
0060FEC0                          2796      * End Sequence if mullet out of bounds
0060FEC0  204E                    2797      move.l a6, a0
0060FEC2  1028 0004               2798      move.b GET_TYPE(a0), d0
0060FEC6  0C00 0004               2799      cmpi.b #MULLET_TYPE, d0                             ; MULLET_TYPE equate located in main
0060FECA  660E                    2800      bne.s MulletNotSpawned
0060FECC  3228 0000               2801      move.w GET_X_POS(a0), d1
0060FED0  0C41 02F8               2802      cmpi.w #(OUTPUT_WINDOW_WIDTH), d1
0060FED4  6D04                    2803      blt.s MulletNotSpawned
0060FED6                          2804      
0060FED6                          2805      * Change Game State
0060FED6  12BC 0004               2806      move.b #MULLET_ESCAPED_STATE, (a1)
0060FEDA                          2807  
0060FEDA                          2808  MulletNotSpawned
0060FEDA                          2809  
0060FEDA  0C11 0002               2810      cmpi.b #MULLET_SEQUENCE_RUNNING_STATE, (a1)
0060FEDE  6C00 0032               2811      bge MulletHasSpawned
0060FEE2                          2812      
0060FEE2                          2813      * Spawn new GameObject if out of bounds
0060FEE2  204E                    2814      move.l a6, a0
0060FEE4  3228 0000               2815      move.w GET_X_POS(a0), d1
0060FEE8  1028 0002               2816      move.b GET_SPEED(a0), d0
0060FEEC  6A0E                    2817      bpl.b PosSpeedBranch 
0060FEEE  0C41 FFB8               2818      cmpi.w #(-FISH_WIDTH), d1
0060FEF2  6E1E                    2819      bgt.s StillInBounds
0060FEF4  2A48                    2820      move.l a0, a5
0060FEF6  4EB9 0007B902           2821      jsr SpawnGameObject
0060FEFC                          2822  PosSpeedBranch
0060FEFC  204E                    2823      move.l a6, a0
0060FEFE  1028 0002               2824      move.b GET_SPEED(a0), d0
0060FF02  6B0E                    2825      bmi.b StillInBounds
0060FF04  0C41 02F8               2826      cmpi.w #(OUTPUT_WINDOW_WIDTH), d1
0060FF08  6D08                    2827      blt.s StillInBounds
0060FF0A  2A48                    2828      move.l a0, a5
0060FF0C  4EB9 0007B902           2829      jsr SpawnGameObject
0060FF12                          2830  StillInBounds
0060FF12                          2831  
0060FF12                          2832  MulletHasSpawned
0060FF12                          2833  
0060FF12  4E75                    2834      rts
0060FF14                          2835  
0060FF14                          2836      
0060FF14                          2837  
0060FF14                          2838  
0060FF14                          2839  
0060FF14                          2840  
0060FF14                          2841  
0060FF14                          2842  
0060FF14                          2843  
0060FF14                          2844  
0060FF14                          2845  
0060FF14                          2846  
0060FF14                          2847  
0060FF14                          2848  -------------------- end include --------------------
0060FF14                          2849      INCLUDE "DrawFishingUI.X68"
0060FF14                          2850  
0060FF14  =00000004               2851  BOBBER_WIDTH                    EQU 4
0060FF14  =00000005               2852  BOBBER_HEIGHT                   EQU 5
0060FF14                          2853  
0060FF14  =00000002               2854  WORM_WIDTH                      EQU 2
0060FF14  =00000008               2855  WORM_LENGTH                     EQU 8
0060FF14                          2856  
0060FF14                          2857  DrawFishingUI   
0060FF14                          2858      * Set Fishing Line Pen Color
0060FF14  7050                    2859      move.l #PEN_COLOR_TRAP_CODE, d0
0060FF16  7200                    2860      moveq #0, d1
0060FF18  4E4F                    2861      trap #15
0060FF1A                          2862  
0060FF1A  43F9 0060FA2A           2863      lea CurrentMouseY, a1
0060FF20  2A11                    2864      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FF22                          2865  
0060FF22                          2866      * Draw Fishing Line
0060FF22  7054                    2867      move.l #DRAW_LINE_TRAP_CODE, d0
0060FF24  343C 002A               2868      move.w #TOP_OF_POLE, d2
0060FF28  3805                    2869      move.w d5, d4
0060FF2A  323C 016F               2870      move.w #POLE_X, d1
0060FF2E  363C 016F               2871      move.w #POLE_X, d3
0060FF32  4E4F                    2872      trap #15
0060FF34                          2873  
0060FF34                          2874      * Set Bobber Pen Color
0060FF34  7050                    2875      move.l #PEN_COLOR_TRAP_CODE, d0
0060FF36  223C 000000FF           2876      move.l #RED, d1
0060FF3C  4E4F                    2877      trap #15
0060FF3E                          2878      
0060FF3E                          2879      * Set Bobber Fill Color
0060FF3E  7051                    2880      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0060FF40  223C 00FFFFFF           2881      move.l #WHITE, d1
0060FF46  4E4F                    2882      trap #15
0060FF48                          2883      
0060FF48                          2884      * Draw Bobber
0060FF48  7057                    2885      move.l #DRAW_RECT_TRAP_CODE, d0
0060FF4A  3405                    2886      move.w d5, d2
0060FF4C  3805                    2887      move.w d5, d4
0060FF4E  5B42                    2888      subi.w #BOBBER_HEIGHT, d2
0060FF50  5A44                    2889      addi.w #BOBBER_HEIGHT, d4
0060FF52  323C 016B               2890      move.w #(POLE_X)-BOBBER_WIDTH, d1
0060FF56  363C 0173               2891      move.w #(POLE_X)+BOBBER_WIDTH, d3
0060FF5A  4E4F                    2892      trap #15
0060FF5C                          2893      
0060FF5C                          2894      * Draw worm if worm on line
0060FF5C  43F9 00610284           2895      lea FishingManagerTable, a1
0060FF62  1029 0003               2896      move.b GET_IS_WORM_ON_HOOK(a1), d0
0060FF66  6728                    2897      beq.s DontDisplayWorm
0060FF68                          2898      
0060FF68                          2899      * Set Worm Pen Color
0060FF68  7050                    2900      move.l #PEN_COLOR_TRAP_CODE, d0
0060FF6A  223C 004117A4           2901      move.l #WORM_PEN_COLOR, d1
0060FF70  4E4F                    2902      trap #15
0060FF72                          2903      
0060FF72                          2904      * Set Worm Fill Color
0060FF72  7051                    2905      move.l #SET_FILL_COLOR_TRAP_CODE, d0
0060FF74  223C 008888FF           2906      move.l #WORM_FILL_COLOR, d1
0060FF7A  4E4F                    2907      trap #15
0060FF7C                          2908      
0060FF7C                          2909      * Draw Worm
0060FF7C  7057                    2910      move.l #DRAW_RECT_TRAP_CODE, d0
0060FF7E  3405                    2911      move.w d5, d2
0060FF80  3805                    2912      move.w d5, d4
0060FF82  5444                    2913      addi.w #WORM_WIDTH, d4
0060FF84  5542                    2914      subi.w #WORM_WIDTH, d2
0060FF86  323C 0167               2915      move.w #(POLE_X)-WORM_LENGTH, d1
0060FF8A  363C 0177               2916      move.w #(POLE_X)+WORM_LENGTH, d3
0060FF8E  4E4F                    2917      trap #15
0060FF90                          2918  DontDisplayWorm
0060FF90                          2919  
0060FF90  43F9 0060FA2A           2920      lea CurrentMouseY, a1
0060FF96  2A11                    2921      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FF98                          2922      
0060FF98                          2923      * Draw fish if fish on line
0060FF98  43F9 00610284           2924      lea FishingManagerTable, a1
0060FF9E  1029 0001               2925      move.b GET_IS_FISH_ON_HOOK(a1), d0
0060FFA2  6746                    2926      beq.s DontDisplayFish
0060FFA4  45F9 000157FC           2927      lea CAUGHT_FISH_BITMAP, a2
0060FFAA  2F3C 0000008A           2928      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
0060FFB0  2F3C 00000012           2929      move.l #CAUGHT_FISH_WIDTH, -(sp)                    ; Bitmap Width
0060FFB6  2F3C 00000024           2930      move.l #CAUGHT_FISH_HEIGHT, -(sp)                   ; Bitmap Height
0060FFBC  2F0A                    2931      move.l a2, -(sp)                                    ; Bitmap Signature
0060FFBE  2F3C 00000000           2932      move.l #0, -(sp)                                    ; Bitmap Chunk X
0060FFC4  2F3C 00000000           2933      move.l #0, -(sp)                                    ; Bitmap Chunk Y
0060FFCA  2F3C 00000012           2934      move.l #CAUGHT_FISH_WIDTH, -(sp)                    ; Bitmap Chunk Width
0060FFD0  2F3C 00000024           2935      move.l #CAUGHT_FISH_HEIGHT, -(sp)                   ; Bitmap Chunk Height
0060FFD6  2F3C 00000166           2936      move.l #POLE_X-(CAUGHT_FISH_WIDTH/2), -(sp)         ; Output Screen X
0060FFDC  2F05                    2937      move.l d5, -(sp)                                    ; Output Screen Y
0060FFDE  4EB9 0007B844           2938      jsr DisplayBitmapChunk
0060FFE4  DFFC 00000028           2939      add.l #BM_CHUNKER_STACK_SIZE, sp
0060FFEA                          2940  DontDisplayFish
0060FFEA                          2941  
0060FFEA  43F9 0060FA2A           2942      lea CurrentMouseY, a1
0060FFF0  2A11                    2943      move.l (a1), d5                                     ; d5 = CurrentMouseY
0060FFF2                          2944  
0060FFF2                          2945      * Check if GameObjects and line should be hidden by ice
0060FFF2  0C85 0000007B           2946      cmpi.l #(ICE_SEGMENT_TOP-CAUGHT_FISH_HEIGHT), d5
0060FFF8  6D00 00A6               2947      blt DontDrawIceSegment
0060FFFC                          2948      
0060FFFC                          2949      * Fill behind fishing line
0060FFFC  45F9 00281560           2950      lea BG_BITMAP, a2
00610002  2F3C 0000008A           2951      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
00610008  2F3C 000002F8           2952      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                  ; Bitmap Width
0061000E  2F3C 00000258           2953      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                 ; Bitmap Height
00610014  2F0A                    2954      move.l a2, -(sp)                                    ; Bitmap Signature
00610016  2F3C 0000016F           2955      move.l #POLE_X, -(sp)                               ; Bitmap Chunk X
0061001C  2F3C 0000009F           2956      move.l #ICE_SEGMENT_TOP, -(sp)                      ; Bitmap Chunk Y
00610022  2F3C 00000001           2957      move.l #1, -(sp)                                    ; Bitmap Chunk Width
00610028  2F3C 00000014           2958      move.l #ICE_SEGMENT_HEIGHT, -(sp)                    ; Bitmap Chunk Height
0061002E  2F3C 0000016F           2959      move.l #POLE_X, -(sp)                               ; Output Screen X
00610034  2F3C 0000009F           2960      move.l #ICE_SEGMENT_TOP, -(sp)                      ; Output Screen Y
0061003A  4EB9 0007B844           2961      jsr DisplayBitmapChunk
00610040  DFFC 00000028           2962      add.l #BM_CHUNKER_STACK_SIZE, sp
00610046                          2963      
00610046  43F9 0060FA2A           2964      lea CurrentMouseY, a1
0061004C  2A11                    2965      move.l (a1), d5                                     ; d5 = CurrentMouseY
0061004E                          2966      
0061004E                          2967      * Check if only GameObjects should be hidden by ice
0061004E  0C85 000000B3           2968      cmpi.l #ICE_SEGMENT_BOTTOM, d5
00610054  6E4A                    2969      bgt.s DontDrawIceSegment
00610056                          2970      
00610056                          2971      * Draw Ice Segment
00610056  45F9 00281560           2972      lea BG_BITMAP, a2
0061005C  2F3C 0000008A           2973      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
00610062  2F3C 000002F8           2974      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                  ; Bitmap Width
00610068  2F3C 00000258           2975      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                 ; Bitmap Height
0061006E  2F0A                    2976      move.l a2, -(sp)                                    ; Bitmap Signature
00610070  2F3C 00000166           2977      move.l #POLE_X-(CAUGHT_FISH_WIDTH/2), -(sp)         ; Bitmap Chunk X
00610076  2F3C 0000009F           2978      move.l #(ICE_SEGMENT_TOP), -(sp)                    ; Bitmap Chunk Y
0061007C  2F3C 00000012           2979      move.l #CAUGHT_FISH_WIDTH, -(sp)                    ; Bitmap Chunk Width
00610082  2F3C 00000014           2980      move.l #(ICE_SEGMENT_HEIGHT), -(sp)                 ; Bitmap Chunk Height
00610088  2F3C 00000166           2981      move.l #POLE_X-(CAUGHT_FISH_WIDTH/2), -(sp)         ; Output Screen X
0061008E  2F3C 0000009F           2982      move.l #ICE_SEGMENT_TOP, -(sp)   ; Output Screen Y
00610094  4EB9 0007B844           2983      jsr DisplayBitmapChunk
0061009A  DFFC 00000028           2984      add.l #BM_CHUNKER_STACK_SIZE, sp
006100A0                          2985  DontDrawIceSegment
006100A0                          2986      
006100A0                          2987      * Repaint from double buffer
006100A0  705E                    2988      move.l #REPAINT_SCREEN_TRAP_CODE, d0
006100A2  4E4F                    2989      trap #15
006100A4                          2990      
006100A4  43F9 0060FA2A           2991      lea CurrentMouseY, a1
006100AA  2A11                    2992      move.l (a1), d5                                     ; d5 = CurrentMouseY
006100AC                          2993  
006100AC                          2994      * Fill behind fishing line
006100AC  45F9 00281560           2995      lea BG_BITMAP, a2
006100B2  2F3C 0000008A           2996      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
006100B8  2F3C 000002F8           2997      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                  ; Bitmap Width
006100BE  2F3C 00000258           2998      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                 ; Bitmap Height
006100C4  2F0A                    2999      move.l a2, -(sp)                                    ; Bitmap Signature
006100C6  2F3C 0000016F           3000      move.l #POLE_X, -(sp)                               ; Bitmap Chunk X
006100CC  2F3C 0000002A           3001      move.l #TOP_OF_POLE, -(sp)                          ; Bitmap Chunk Y
006100D2  2F3C 00000001           3002      move.l #1, -(sp)                                    ; Bitmap Chunk Width
006100D8  2005                    3003      move.l d5, d0
006100DA  0480 0000002A           3004      sub.l #TOP_OF_POLE, d0
006100E0  2F00                    3005      move.l d0, -(sp)                                    ; Bitmap Chunk Height
006100E2  2F3C 0000016F           3006      move.l #POLE_X, -(sp)                               ; Output Screen X
006100E8  2F3C 0000002A           3007      move.l #TOP_OF_POLE, -(sp)                          ; Output Screen Y
006100EE  4EB9 0007B844           3008      jsr DisplayBitmapChunk
006100F4  DFFC 00000028           3009      add.l #BM_CHUNKER_STACK_SIZE, sp
006100FA                          3010      
006100FA  43F9 0060FA2A           3011      lea CurrentMouseY, a1
00610100  2A11                    3012      move.l (a1), d5                                     ; d5 = CurrentMouseY
00610102                          3013      
00610102                          3014      * Fill behind bobber
00610102  5B45                    3015      subi.w #BOBBER_HEIGHT, d5
00610104  45F9 00281560           3016      lea BG_BITMAP, a2
0061010A  2F3C 0000008A           3017      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
00610110  2F3C 000002F8           3018      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                  ; Bitmap Width
00610116  2F3C 00000258           3019      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                 ; Bitmap Height
0061011C  2F0A                    3020      move.l a2, -(sp)                                    ; Bitmap Signature
0061011E  2F3C 0000016B           3021      move.l #(POLE_X)-BOBBER_WIDTH, -(sp)                ; Bitmap Chunk X
00610124  2F05                    3022      move.l d5, -(sp)                                    ; Bitmap Chunk Y
00610126  2F3C 00000009           3023      move.l #(BOBBER_WIDTH*2)+1, -(sp)                   ; Bitmap Chunk Width
0061012C  2F3C 0000000B           3024      move.l #(BOBBER_HEIGHT*2)+1, -(sp)                    ; Bitmap Chunk Height
00610132  2F3C 0000016B           3025      move.l #(POLE_X)-BOBBER_WIDTH, -(sp)                ; Output Screen X
00610138  2F05                    3026      move.l d5, -(sp)                                    ; Output Screen Y
0061013A  4EB9 0007B844           3027      jsr DisplayBitmapChunk
00610140  DFFC 00000028           3028      add.l #BM_CHUNKER_STACK_SIZE, sp
00610146                          3029      
00610146                          3030      * Fill behind worm if worm on line
00610146  43F9 00610284           3031      lea FishingManagerTable, a1
0061014C  1029 0003               3032      move.b GET_IS_WORM_ON_HOOK(a1), d0
00610150  674C                    3033      beq.s DontFillWorm
00610152                          3034      
00610152  43F9 0060FA2A           3035      lea CurrentMouseY, a1
00610158  2A11                    3036      move.l (a1), d5                                     ; d5 = CurrentMouseY
0061015A                          3037      
0061015A                          3038      * Fill behind worm
0061015A  5585                    3039      subi.l #WORM_WIDTH, d5
0061015C  45F9 00281560           3040      lea BG_BITMAP, a2
00610162  2F3C 0000008A           3041      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
00610168  2F3C 000002F8           3042      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                  ; Bitmap Width
0061016E  2F3C 00000258           3043      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                 ; Bitmap Height
00610174  2F0A                    3044      move.l a2, -(sp)                                    ; Bitmap Signature
00610176  2F3C 00000167           3045      move.l #(POLE_X)-WORM_LENGTH, -(sp)                 ; Bitmap Chunk X
0061017C  2F05                    3046      move.l d5, -(sp)                                    ; Bitmap Chunk Y
0061017E  2F3C 00000011           3047      move.l #(WORM_LENGTH*2)+1, -(sp)                    ; Bitmap Chunk Width
00610184  2F3C 00000005           3048      move.l #(WORM_WIDTH*2)+1, -(sp)                     ; Bitmap Chunk Height
0061018A  2F3C 00000167           3049      move.l #(POLE_X)-WORM_LENGTH, -(sp)                 ; Output Screen X
00610190  2F05                    3050      move.l d5, -(sp)                                    ; Output Screen Y
00610192  4EB9 0007B844           3051      jsr DisplayBitmapChunk
00610198  DFFC 00000028           3052      add.l #BM_CHUNKER_STACK_SIZE, sp
0061019E                          3053  DontFillWorm
0061019E                          3054      
0061019E  43F9 0060FA2A           3055      lea CurrentMouseY, a1
006101A4  2A11                    3056      move.l (a1), d5                                     ; d5 = CurrentMouseY
006101A6                          3057      
006101A6                          3058      * Fill fish if fish on line
006101A6  43F9 00610284           3059      lea FishingManagerTable, a1
006101AC  1029 0001               3060      move.b GET_IS_FISH_ON_HOOK(a1), d0
006101B0  6742                    3061      beq.s DontFillFish
006101B2  45F9 00281560           3062      lea BG_BITMAP, a2
006101B8  2F3C 0000008A           3063      move.l #PA_OFFSET, -(sp)                            ; Bitmap Offset
006101BE  2F3C 000002F8           3064      move.l #OUTPUT_WINDOW_WIDTH, -(sp)                  ; Bitmap Width
006101C4  2F3C 00000258           3065      move.l #OUTPUT_WINDOW_HEIGHT, -(sp)                 ; Bitmap Height
006101CA  2F0A                    3066      move.l a2, -(sp)                                    ; Bitmap Signature
006101CC  2F3C 00000166           3067      move.l #POLE_X-(CAUGHT_FISH_WIDTH/2), -(sp)         ; Bitmap Chunk X
006101D2  2F05                    3068      move.l d5, -(sp)                                    ; Bitmap Chunk Y
006101D4  2F3C 00000012           3069      move.l #CAUGHT_FISH_WIDTH, -(sp)                    ; Bitmap Chunk Width
006101DA  2F3C 00000024           3070      move.l #CAUGHT_FISH_HEIGHT, -(sp)                   ; Bitmap Chunk Height
006101E0  2F3C 00000166           3071      move.l #POLE_X-(CAUGHT_FISH_WIDTH/2), -(sp)         ; Output Screen X
006101E6  2F05                    3072      move.l d5, -(sp)                                    ; Output Screen Y
006101E8  4EB9 0007B844           3073      jsr DisplayBitmapChunk
006101EE  DFFC 00000028           3074      add.l #BM_CHUNKER_STACK_SIZE, sp
006101F4                          3075  DontFillFish
006101F4                          3076  
006101F4                          3077      * Set Water Pen Color
006101F4  7050                    3078      move.l #PEN_COLOR_TRAP_CODE, d0
006101F6  223C 00D28049           3079      move.l #WATER_COLOR, d1
006101FC  4E4F                    3080      trap #15
006101FE                          3081      
006101FE                          3082      * Set Water Fill Color
006101FE  7051                    3083      move.l #SET_FILL_COLOR_TRAP_CODE, d0
00610200  223C 00D28049           3084      move.l #WATER_COLOR, d1
00610206  4E4F                    3085      trap #15
00610208                          3086      
00610208  4E75                    3087      rts
0061020A                          3088  
0061020A                          3089  -------------------- end include --------------------
0061020A                          3090      INCLUDE "FrameUpdate.X68"
0061020A                          3091  
0061020A                          3092  FrameUpdate
0061020A                          3093      * Skip updates if current time goal has not been met
0061020A  7008                    3094      move.l #GET_TIME_TRAP_CODE, d0
0061020C  4E4F                    3095      trap #15
0061020E  43F9 004521B4           3096      lea TimeGoal, a1
00610214  2011                    3097      move.l (a1), d0
00610216  B280                    3098      cmp.l d0, d1
00610218  6D00 0044               3099      blt SkipUpdate
0061021C                          3100      
0061021C                          3101      * Set time Goal to (current time + frame duration)
0061021C  7008                    3102      move.l #GET_TIME_TRAP_CODE, d0
0061021E  4E4F                    3103      trap #15
00610220  5681                    3104      addi.l #FRAME_DURATION, d1
00610222  43F9 004521B4           3105      lea TimeGoal, a1
00610228  2281                    3106      move.l d1, (a1)
0061022A                          3107  
0061022A                          3108      * Increase position and change frame
0061022A  204E                    3109      move.l a6, a0                                   ; get current GameObject being updated
0061022C  1028 0002               3110      move.b GET_SPEED(a0), d0
00610230  4880                    3111      ext.w d0
00610232  D168 0000               3112      add.w d0, GET_X_POS(a0)                         ; add speed to x-pos
00610236  5228 0005               3113      addi.b #1, GET_FRAME(a0)                        ; increment to next frame
0061023A  0C28 0004 0005          3114      cmpi.b #FRAME_RESET, GET_FRAME(a0)              ; check if the frame needs to be reset
00610240  6D04                    3115      blt.s SkipFrameReset
00610242  5928 0005               3116      sub.b #FRAME_RESET, GET_FRAME(a0)
00610246                          3117  SkipFrameReset
00610246                          3118  
00610246                          3119      * Go to next GameObject in list
00610246  5C8E                    3120      add.l #GAME_OBJECT_TABLE_ENTRY_SIZE, a6
00610248                          3121      
00610248                          3122      * Reset to beginning if max GameObjects reached
00610248  51CF 0014               3123      dbra d7, SkipLoopReset
0061024C  4DF9 00610260           3124      lea GameObjectTable, a6                         ; reset to start of GameObject table
00610252  41F9 00610293           3125      lea GetCurrentMaxGameObjects, a0
00610258  7E00                    3126      moveq #0, d7
0061025A  1E10                    3127      move.b (a0), d7                                 ; d0 = current number of max GameObjects
0061025C  5307                    3128      subi.b #1, d7                                   ; adjust for dbra
0061025E                          3129  SkipLoopReset
0061025E                          3130  
0061025E                          3131  SkipUpdate
0061025E                          3132  
0061025E  4E75                    3133      rts
00610260                          3134  
00610260                          3135  -------------------- end include --------------------
00610260                          3136      
00610260                          3137  *--------------------Global Variables--------------------*
00610260                          3138  
00610260                          3139  *--1 word + 4 bytes per GameObject: [x-pos] + [speed][lane][type][frame]--*
00610260                          3140  GameObjectTable ds.w (3*MAX_GAME_OBJECTS)
00610284                          3141  
00610284                          3142  *--1 byte each: [Number of Fish caught][Is there a fish on the hook?][Number of worms remaining][Is there a worm on the hook]--*
00610284                          3143  FishingManagerTable ds.l 1
00610288                          3144  
00610288                          3145  *--0 = Normal Game State, 1 = Ready for Mullet Spawn, 2 = Mullet Sequence Running, 3 = Mullet Caught, 4 = Mullet Escaped--*
00610288                          3146  GameState ds.b 1
00610289                          3147  
00610289                          3148  *--Table holding actual screen location of lanes 0, 1, 2, and 3--*
0061028A= 00E2 012A 0172 01BA     3149  LocationTable dc.w LANE_0_LOCATION, LANE_1_LOCATION, LANE_2_LOCATION, LANE_3_LOCATION
00610292                          3150  
00610292                          3151  *--Number of fish that have spawned--*
00610292                          3152  NumFishSpawned ds.b 1
00610293                          3153  
00610293                          3154  *--Current number of GameObjects allowed at one time--*
00610293                          3155  GetCurrentMaxGameObjects ds.b 1
00610294                          3156  
00610294                          3157      END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABOVE_WATER         8F
ADDSCORETOLEADERBOARD  7BE74
BACKSPACEASCIIVALUE  8
BACKSPACENOTPRESSED  7BD86
BGMUSIC             60F848
BG_BITMAP           281560
BITMASK_TABLE_ENTRY_SIZE  4
BLACK               0
BLANKLEADERBOARDFILEPATH  159979
BMP_SIGNATURE_LOCAL  24
BMP_SIGNATURE_LOCAL_Q  18
BM_CHUNKER_STACK_SIZE  28
BOBBER_HEIGHT       5
BOBBER_WIDTH        4
BOOTQUICKSAVE       53044
BOOT_BITMAP         35BBA
BOOT_HEIGHT         30
BOOT_TYPE           1
BOOT_WIDTH          30
BOTTOM_OF_WATER     1DE
BOUNDSCHECK         60FEB2
CANNOTCATCHFISH     60FDE2
CANNOTGETNEWWORM    60FE94
CATCHFISH           60FD4E
CATCHFISHSOUND      60FDE4
CAUGHT_FISH_BITMAP  157FC
CAUGHT_FISH_HEIGHT  24
CAUGHT_FISH_WIDTH   12
CHECKBITS           7BB7A
CHECKFORCOLLISION   60FB22
CHECKIFALLGAMEOBJECTAREINVISIBLE  7BC98
CHUNK_HEIGHT_LOCAL  14
CHUNK_HEIGHT_LOCAL_Q  8
CHUNK_START_X_LOCAL  20
CHUNK_START_X_LOCAL_Q  14
CHUNK_START_Y_LOCAL  1C
CHUNK_START_Y_LOCAL_Q  10
CHUNK_WIDTH_LOCAL   18
CHUNK_WIDTH_LOCAL_Q  C
CLEAR_SCREEN_MODE   FF00
CLEAR_SCREEN_TRAP_CODE  B
CLICKTORETURNTEXT   281222
CLICK_TO_START_HEIGHT  37
CLICK_TO_START_WIDTH  1B8
CLICK_TO_START_X    9B
CLICK_TO_START_Y    1E8
CLOSE_FILE_TRAP_CODE  38
COLOR_DATA_SHIFT    8
COOLER_COLOR        98E5FE
COOLER_ONES_X       121
COOLER_ONES_Y       6E
COOLER_SEGMENT_SIZE  A
COOLER_SEGMENT_WIDTH  3
COOLER_SLANT_OFFSET  2
COOLER_TENS_X       10E
COOLER_TENS_Y       73
COOLER_TEXT_COLOR   405D67
CORRECTLOWERBOUND   60FA12
CORRECTUPPERBOUND   60FA20
CURRENTMOUSEY       60FA2A
DEC_TO_ASCII        30
DELETESAVEDATA      7BD16
DINGSOUND           60FE96
DISPLAYBITMAPCHUNK  7B844
DISPLAY_SAVE_X      8
DISPLAY_SAVE_Y      4
DISPLAY_X_LOCAL     10
DISPLAY_Y_LOCAL     C
DONESPAWNINGCHECK   7BC90
DONOTDRAWPIXEL      12DA
DONOTDRAWSEGMENT    7BB86
DONTCATCHFISH       7B9F4
DONTCATCHMULLET     7BAAE
DONTCLEARTENSDIGITFISH  159AF0
DONTCLEARTENSDIGITTOTAL  159A9E
DONTDISPLAYFISH     60FFEA
DONTDISPLAYWORM     60FF90
DONTDRAWICESEGMENT  6100A0
DONTFILLFISH        6101F4
DONTFILLWORM        61019E
DOUBLE_BUFFERING_MODE_NUMBER  11
DO_MULLET_SETUP_STATE  1
DRAWA               7BB9C
DRAWB               7BBBC
DRAWC               7BBD6
DRAWD               7BBF0
DRAWE               7BC10
DRAWF               7BC2E
DRAWFISHINGUI       60FF14
DRAWG               7BC4C
DRAWGAMEOBJECTS     60F8DA
DRAWLEADERBOARD     7BECE
DRAWNUMBER          7BB06
DRAWROW             7B89E
DRAWROWS            7B894
DRAWSCORE           7BF2C
DRAW_LINE_TRAP_CODE  54
DRAW_MODE_TRAP_CODE  5C
DRAW_PIXEL_TRAP_CODE  52
DRAW_RECT_TRAP_CODE  57
END_BANNER_BITMAP   159B58
END_BANNER_CONTENT_X  48
END_BANNER_FONT     6100000
END_BANNER_FONT_BOLD  6100001
END_BANNER_FONT_WIDTH  C
END_BANNER_HEIGHT   18E
END_BANNER_WIDTH    17C
END_BANNER_X        FF
END_BG_BITMAP       43EAEA
END_BOOT_BITMAP     3EC44
END_CAUGHT_FISH_BITMAP  162A6
END_END_BANNER_BITMAP  281222
END_FISH_BITMAP     B572
END_FISH_BITMAP_FLIPPED  157FC
END_JELLY_BITMAP    35BBA
END_LEADERBOARD_BITMAP  C5D8E
END_MULLET_BITMAP   2CB30
END_NAME_PROMPT_BITMAP  159938
END_TITLE_BITMAP    60F7E0
END_WORM_COUNT_BITMAP  4521B4
ESCAPEASCIIVALUE    1B
EYESNOTPOINTINGDOWN  60FB16
EYESNOTPOINTINGFORWARD  60FABC
EYE_DOWN_Y          3E
EYE_HEIGHT          5
EYE_UP_Y            3B
EYE_WIDTH           3
FAST_LEFT           FFFFFFF9
FAST_RIGHT          7
FILEEXISTS          7BD04
FILENOTFOUNDID      FFFFFFFF
FISHFLEE            7BAB0
FISHINGMANAGERTABLE  610284
FISHQUICKSAVE       3EC44
FISHSCORE_CHARCTER_OFFSET  C
FISHSCORE_Y         16B
FISH_BITMAP         12E8
FISH_BITMAP_FLIPPED  B572
FISH_FLEE_X_VELOCITY  2
FISH_HEIGHT         24
FISH_TYPE           0
FISH_WIDTH          48
FLEEINGFISHPHYSICSMANAGER  60FD42
FLEEINGFISHPHYSICSUPDATE  60FC64
FLIPPEDFISHQUICKSAVE  48E44
FRAMEUPDATE         61020A
FRAME_0             0
FRAME_1             1
FRAME_2             2
FRAME_3             3
FRAME_DURATION      3
FRAME_RESET         4
GAMEEXITCLEANUP     60F8C4
GAMEOBJECTTABLE     610260
GAMEOVER            109C
GAMEOVERLOADING     1599AA
GAMESTATE           610288
GAME_OBJECT_TABLE_ENTRY_SIZE  6
GETCHARACTERONE     7BE1E
GETCHARACTERTHREE   7BE56
GETCHARACTERTWO     7BE3A
GETCURRENTMAXGAMEOBJECTS  610293
GETNEWWORM          60FE00
GETPLAYERNAME       7BD88
GETRANDOMBYTEINTOD6  7B8DC
GET_BMAP_HEIGHT_LOCAL  28
GET_BMAP_HEIGHT_LOCAL_Q  1C
GET_BMAP_WIDTH_LOCAL  2C
GET_BMAP_WIDTH_LOCAL_Q  20
GET_DESTINATION_ADDRESS_Q  28
GET_FRAME           5
GET_IS_FISH_ON_HOOK  1
GET_IS_WORM_ON_HOOK  3
GET_KEY_STATE_TRAP_CODE  13
GET_LANE            3
GET_NUM_FISH_CAUGHT  0
GET_NUM_WORMS_LEFT  2
GET_PIXEL_ARRAY_OFFSET_LOCAL  30
GET_PIXEL_ARRAY_OFFSET_LOCAL_Q  24
GET_SINGLE_CHAR_TRAP_CODE  5
GET_SPEED           2
GET_TIME_TRAP_CODE  8
GET_TYPE            4
GET_X_POS           0
GET_X_POSITION      8
GET_X_VELOCITY      A
GET_Y_POSITION      0
GET_Y_VELOCITY      4
GRAVITY             C
HANDLEBOOTCOLLISION  7B9F6
HANDLEFISHCOLLISION  7B99A
HANDLEJELLYCOLLISION  7BA56
HANDLEMULLETCOLLISION  7BA8C
HIGHSCORE_CHARCTER_OFFSET  9
ICE_SEGMENT_BOTTOM  B3
ICE_SEGMENT_HEIGHT  14
ICE_SEGMENT_TOP     9F
INSERTSCORELOOP     7BEA2
INVISIBLE_TYPE      3
JELLYQUICKSAVE      5C044
JELLY_BITMAP        2CB30
JELLY_HEIGHT        30
JELLY_TYPE          2
JELLY_WIDTH         30
LANE_0              0
LANE_0_LOCATION     E2
LANE_1              1
LANE_1_LOCATION     12A
LANE_2              2
LANE_2_LOCATION     172
LANE_3              3
LANE_3_LOCATION     1BA
LEADERBOARDDATASIZE  28
LEADERBOARDFILEPATH  159960
LEADERBOARDSCORETEXT  15999C
LEADERBOARD_BITMAP  7BF74
LEADERBOARD_DATA    159938
LEADERBOARD_ENTRY_LINE_SPACE  1E
LEADERBOARD_ENTRY_X  210
LEADERBOARD_ENTRY_Y  A5
LEADERBOARD_HEIGHT  18E
LEADERBOARD_WIDTH   BE
LEADERBOARD_X       253
LEFT_EYE_X          1DB
LINEZAP             7BACE
LOADINGTEXT         60F83E
LOADING_PURPLE_COLOR  7E5958
LOADING_SMALL_FONT  20A0001
LOADING_X           299
LOADING_Y           23F
LOAD_SOUND_TRAP_CODE  4A
LOCATIONTABLE       61028A
LOOP_SOUND_TRAP_CODE  4D
MAINGAMELOOP        1042
MAIN_GAME_STATE     0
MAX_GAME_OBJECTS    6
MAX_PRINATBLE_CHARACTER  7E
MIN_PRINATBLE_CHARACTER  21
MOUSEINPUTHANDLER   60F9FE
MOUSE_INPUT_TRAP_CODE  3D
MOUSE_LOWER_BOUND   34
MOUSE_UPPER_BOUND   22A
MOVEEYES            60FA2E
MULLETHASSPAWNED    60FF12
MULLETNOTSPAWNED    60FEDA
MULLETQUICKSAVE     65044
MULLETSCORETEXT     28126C
MULLETSCORE_Y       18E
MULLETSEQUENCESETUP  60F864
MULLET_BITMAP       162A6
MULLET_CAUGHT_STATE  3
MULLET_ESCAPED_STATE  4
MULLET_HEIGHT       30
MULLET_SCORE_BONUS  5
MULLET_SEQUENCE_RUNNING_STATE  2
MULLET_TYPE         4
MULLET_WIDTH        78
NAME_CHARCTER_OFFSET  0
NAME_PROMPT_BITMAP  C5D8E
NAME_PROMPT_CURSOR_POSITION_1  803
NAME_PROMPT_CURSOR_POSITION_2  903
NAME_PROMPT_CURSOR_POSITION_3  A03
NAME_PROMPT_FONT    6360001
NINC0               7B8E6
NINC1               7B8EE
NOBAITONLINE        7BA8A
NOCOLLISION         60FC62
NOFISHONLINE        7BA54
NOTAFISH            7B992
NOTBOOT             60F998
NOTBOOTCOLLISION    60FBCE
NOTFASTLEFT         7B950
NOTFASTRIGHT        7B938
NOTFISH             60F966
NOTFISHCOLLISION    60FB78
NOTJELLY            60F9CA
NOTJELLYCOLLISION   60FC18
NOTMULLET           60F9FC
NOTMULLETCOLLISION  60FC62
NOTPLACEHOLDERSCORE  7BF42
NOTREADYFORMULLET   1090
NOTSLOWLEFT         7B944
NOTSLOWRIGHT        7B92C
NO_BUFFERING_MODE_NUMBER  10
NUMBER_OF_FISH_TO_SPAWN  E
NUMBER_OF_SEGMENTS  7
NUMFISHSPAWNED      610292
NUM_BONUS_GAME_OBJECTS  3
NUM_FRACTIONAL_BITS  4
ONEDIGITFISHSCORETEXT  281240
ONETIMEGAMESETUP    60F7E0
OPEN_EXISTING_FILE_TRAP_CODE  33
OPEN_NEW_FILE_TRAP_CODE  34
OUTPUT_WINDOW_HEIGHT  258
OUTPUT_WINDOW_WIDTH  2F8
PA_OFFSET           8A
PEN_COLOR_TRAP_CODE  50
PEN_WIDTH_TRAP_CODE  5D
PLAYERNAME          159998
PLAY_SOUND_TRAP_CODE  49
POLE_X              16F
POSITIVESPEED       60F940
POSITIVEXVELOCITY   7BA36
POSSPEED            7B918
POSSPEEDBRANCH      60FEFC
PREGAMESETUP        2812BC
PRESSESCTOEXITTEXT  2812A0
PRESS_ESC_TO_EXIT_TEXT_HEIGHT  32
PRESS_ESC_TO_EXIT_TEXT_WIDTH  190
PRESS_ESC_TO_EXIT_TEXT_X  F
PRESS_ESC_TO_EXIT_TEXT_Y  23F
PRESS_TO_DELETE_HEIGHT  18
PRESS_TO_DELETE_WIDTH  168
PRESS_TO_DELETE_X   C8
PRESS_TO_DELETE_Y   208
QUICKDRAW           12A0
QUICKDRAWREFORMAT   10D8
QUICKDRAWROW        12C8
QUICKDRAWROWS       12BE
QUICK_DRAW_STACK_SIZE  18
QUICK_REFORMAT_STACK_SIZE  24
RANDOMVAL           7B8FE
RAND_BYTE_TO_2_BITS  6
READ_FILE_TRAP_CODE  35
RED                 FF
REELINSOUND         7BAEA
REPAINT_SCREEN_TRAP_CODE  5E
RESTARTGAMELOOP     10B4
RESTARTPOINT        1012
RETURN_TO_MENU_TEXT_Y  1D1
RIGHT_EYE_X         1E1
ROW_OFFSET_LOCAL    4
ROW_OFFSET_LOCAL_Q  0
SAVEFILEINITIALIZATION  7BCB4
SAVEGAMEOBJECTBITMAPS  114A
SAVEROW             1124
SAVEROWS            111E
SAVE_HEIGHT         C
SAVE_LOCATION       14
SAVE_OFFSET         18
SAVE_WIDTH          10
SCORE_TEXT_LINE_OFFSET  24
SEEDRANDOMNUMBER    7B8CC
SET_CURSOR_POSITION_TRAP_CODE  B
SET_FILL_COLOR_TRAP_CODE  51
SET_FONT_TRAP_CODE  15
SET_OUTPUT_RESOLUTION_TRAP_CODE  21
SEVEN_SEGMENT_BITMASK_TABLE  7BC6A
SEVEN_SEGMENT_DISPLAY_X_DRAW  3A
SEVEN_SEGMENT_DISPLAY_X_LOCAL  36
SEVEN_SEGMENT_DISPLAY_Y_DRAW  38
SEVEN_SEGMENT_DISPLAY_Y_LOCAL  34
SEVEN_SEGMENT_DRAW_STACK_SIZE  8
SEVEN_SEGMENT_FUNCTION_TABLE  7BC74
SEVEN_SEGMENT_NUMBER_LOCAL  30
SEVEN_SEGMENT_PEN_WIDTH  1
SEVEN_SEGMENT_SIZE_LOCAL  32
SEVEN_SEGMENT_SIZE_LOCAL_DRAW  36
SKIPFRAMERESET      610246
SKIPLOOPRESET       61025E
SKIPMULLETSCOREADDITION  7BE98
SKIPMULLETSCOREDISPLAY  159A80
SKIPPHYSICSUPDATE   60FD40
SKIPRANDOMOFFSET    7B95E
SKIPSPAWNINVISIBLE  7B984
SKIPSUBTRACT        7B964
SKIPSWAP            7BEAC
SKIPUPDATE          61025E
SLOW_LEFT           FFFFFFFB
SLOW_RIGHT          5
SOUND_PLAYER_LOOP_MODE  1
SOUND_PLAYER_STOP_SOUND  2
SPACE_ASCII_CHAR    20
SPAWNGAMEOBJECT     7B902
SPAWNINITIALGAMEOBJECTS  2814D6
START               1000
STARTING_BAIT       3
STARTING_FISH_SPAWNED  4
STARTING_LOCATION_1  FFFFFF38
STARTING_LOCATION_2  FFFFFF2E
STARTING_LOCATION_3  FFFFFFBA
STARTING_LOCATION_4  64
STARTING_LOCATION_5  190
STARTING_LOCATION_6  12C
STARTING_LOCATION_7  FFFFFFB8
STARTING_LOCATION_8  FFFFFF38
STARTING_LOCATION_9  FFFFFE70
STILLHAVEBAITLEFT   7BA7A
STILLINBOUNDS       60FF12
STILLVISIBLEGAMEOBJECTS  7BCB2
TEXT_TO_SCREEN_TRAP_CODE  5F
TIMEGOAL            4521B4
TITLESCREENLOOP     1018
TITLESCREENSETUP    4521B8
TITLE_BITMAP        452256
TOP_OF_POLE         2A
TOP_OF_WATER        BE
TOTALSCORETEXT      281286
TOTALSCORE_CHARCTER_OFFSET  15
TOTALSCORE_Y        1B1
TRANSPARENT         1132
TRANSPARENTPIXEL    7B8B0
TWODIGITFISHSCORETEXT  281256
USED_REG            7FF
VARIABLEINITIALIZATION  2813D6
WATER_COLOR         D28049
WHITE               FFFFFF
WORM_COUNT_BITMAP   43EAEA
WORM_COUNT_HEIGHT   44
WORM_COUNT_WIDTH    49
WORM_COUNT_X        F
WORM_COUNT_Y        14
WORM_FILL_COLOR     8888FF
WORM_LENGTH         8
WORM_PEN_COLOR      4117A4
WORM_WIDTH          2
WRITE_FILE_TRAP_CODE  36
